<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/ObjectAdapterF.php';
    require_once 'Ice/Identity.php';
    require_once 'Ice/Endpoint.php';
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectionInfo'))
    {
        class ConnectionInfo
        {
            public function __construct($incoming=false, $adapterName='', $connectionId='')
            {
                $this->incoming = $incoming;
                $this->adapterName = $adapterName;
                $this->connectionId = $connectionId;
            }

            public function __toString()
            {
                global $Ice__t_ConnectionInfo;
                return IcePHP_stringify($this, $Ice__t_ConnectionInfo);
            }

            public $incoming;
            public $adapterName;
            public $connectionId;
        }

        $Ice__t_ConnectionInfo = IcePHP_defineClass('::Ice::ConnectionInfo', '\\Ice\\ConnectionInfo', -1, false, false, $Ice__t_Object, null, array(
            array('incoming', $IcePHP__t_bool, false, 0),
            array('adapterName', $IcePHP__t_string, false, 0),
            array('connectionId', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!interface_exists('\\Ice\\Connection'))
    {
        interface Connection
        {
            public function close($force);
            public function createProxy($id);
            public function setAdapter($adapter);
            public function getAdapter();
            public function getEndpoint();
            public function flushBatchRequests();
            public function type();
            public function timeout();
            public function toString();
            public function getInfo();
        }

        $Ice__t_Connection = IcePHP_defineClass('::Ice::Connection', '\\Ice\\Connection', -1, true, false, $Ice__t_Object, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\IPConnectionInfo'))
    {
        class IPConnectionInfo extends \Ice\ConnectionInfo
        {
            public function __construct($incoming=false, $adapterName='', $connectionId='', $localAddress="", $localPort=-1, $remoteAddress="", $remotePort=-1)
            {
                parent::__construct($incoming, $adapterName, $connectionId);
                $this->localAddress = $localAddress;
                $this->localPort = $localPort;
                $this->remoteAddress = $remoteAddress;
                $this->remotePort = $remotePort;
            }

            public function __toString()
            {
                global $Ice__t_IPConnectionInfo;
                return IcePHP_stringify($this, $Ice__t_IPConnectionInfo);
            }

            public $localAddress;
            public $localPort;
            public $remoteAddress;
            public $remotePort;
        }

        $Ice__t_IPConnectionInfo = IcePHP_defineClass('::Ice::IPConnectionInfo', '\\Ice\\IPConnectionInfo', -1, false, false, $Ice__t_ConnectionInfo, null, array(
            array('localAddress', $IcePHP__t_string, false, 0),
            array('localPort', $IcePHP__t_int, false, 0),
            array('remoteAddress', $IcePHP__t_string, false, 0),
            array('remotePort', $IcePHP__t_int, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\TCPConnectionInfo'))
    {
        class TCPConnectionInfo extends \Ice\IPConnectionInfo
        {
            public function __construct($incoming=false, $adapterName='', $connectionId='', $localAddress="", $localPort=-1, $remoteAddress="", $remotePort=-1)
            {
                parent::__construct($incoming, $adapterName, $connectionId, $localAddress, $localPort, $remoteAddress, $remotePort);
            }

            public function __toString()
            {
                global $Ice__t_TCPConnectionInfo;
                return IcePHP_stringify($this, $Ice__t_TCPConnectionInfo);
            }
        }

        $Ice__t_TCPConnectionInfo = IcePHP_defineClass('::Ice::TCPConnectionInfo', '\\Ice\\TCPConnectionInfo', -1, false, false, $Ice__t_IPConnectionInfo, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UDPConnectionInfo'))
    {
        class UDPConnectionInfo extends \Ice\IPConnectionInfo
        {
            public function __construct($incoming=false, $adapterName='', $connectionId='', $localAddress="", $localPort=-1, $remoteAddress="", $remotePort=-1, $mcastAddress='', $mcastPort=-1)
            {
                parent::__construct($incoming, $adapterName, $connectionId, $localAddress, $localPort, $remoteAddress, $remotePort);
                $this->mcastAddress = $mcastAddress;
                $this->mcastPort = $mcastPort;
            }

            public function __toString()
            {
                global $Ice__t_UDPConnectionInfo;
                return IcePHP_stringify($this, $Ice__t_UDPConnectionInfo);
            }

            public $mcastAddress;
            public $mcastPort;
        }

        $Ice__t_UDPConnectionInfo = IcePHP_defineClass('::Ice::UDPConnectionInfo', '\\Ice\\UDPConnectionInfo', -1, false, false, $Ice__t_IPConnectionInfo, null, array(
            array('mcastAddress', $IcePHP__t_string, false, 0),
            array('mcastPort', $IcePHP__t_int, false, 0)));
    }
}
?>

<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/BuiltinSequences.php';
}

namespace IceMX
{
    if(!isset($IceMX__t_StringIntDict))
    {
        $IceMX__t_StringIntDict = IcePHP_defineDictionary('::IceMX::StringIntDict', $IcePHP__t_string, $IcePHP__t_int);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\Metrics'))
    {
        class Metrics extends \Ice\ObjectImpl
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0)
            {
                $this->id = $id;
                $this->total = $total;
                $this->current = $current;
                $this->totalLifetime = $totalLifetime;
                $this->failures = $failures;
            }

            public static function ice_staticId()
            {
                return '::IceMX::Metrics';
            }

            public function __toString()
            {
                global $IceMX__t_Metrics;
                return IcePHP_stringify($this, $IceMX__t_Metrics);
            }

            public $id;
            public $total;
            public $current;
            public $totalLifetime;
            public $failures;
        }

        class MetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::Metrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::Metrics', $facet);
            }
        }

        $IceMX__t_Metrics = IcePHP_defineClass('::IceMX::Metrics', '\\IceMX\\Metrics', -1, false, false, $Ice__t_Object, null, array(
            array('id', $IcePHP__t_string, false, 0),
            array('total', $IcePHP__t_long, false, 0),
            array('current', $IcePHP__t_int, false, 0),
            array('totalLifetime', $IcePHP__t_long, false, 0),
            array('failures', $IcePHP__t_int, false, 0)));

        $IceMX__t_MetricsPrx = IcePHP_defineProxy($IceMX__t_Metrics);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\MetricsFailures'))
    {
        class MetricsFailures
        {
            public function __construct($id='', $failures=null)
            {
                $this->id = $id;
                $this->failures = $failures;
            }

            public function __toString()
            {
                global $IceMX__t_MetricsFailures;
                return IcePHP_stringify($this, $IceMX__t_MetricsFailures);
            }

            public $id;
            public $failures;
        }

        $IceMX__t_MetricsFailures = IcePHP_defineStruct('::IceMX::MetricsFailures', '\\IceMX\\MetricsFailures', array(
            array('id', $IcePHP__t_string), 
            array('failures', $IceMX__t_StringIntDict)));
    }
}

namespace IceMX
{
    if(!isset($IceMX__t_MetricsFailuresSeq))
    {
        $IceMX__t_MetricsFailuresSeq = IcePHP_defineSequence('::IceMX::MetricsFailuresSeq', $IceMX__t_MetricsFailures);
    }
}

namespace IceMX
{
    if(!isset($IceMX__t_MetricsMap))
    {
        $IceMX__t_MetricsMap = IcePHP_defineSequence('::IceMX::MetricsMap', $IceMX__t_Metrics);
    }
}

namespace IceMX
{
    if(!isset($IceMX__t_MetricsView))
    {
        $IceMX__t_MetricsView = IcePHP_defineDictionary('::IceMX::MetricsView', $IcePHP__t_string, $IceMX__t_MetricsMap);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\UnknownMetricsView'))
    {
        class UnknownMetricsView extends \Ice\UserException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'IceMX::UnknownMetricsView';
            }

            public function __toString()
            {
                global $IceMX__t_UnknownMetricsView;
                return IcePHP_stringifyException($this, $IceMX__t_UnknownMetricsView);
            }
        }

        $IceMX__t_UnknownMetricsView = IcePHP_defineException('::IceMX::UnknownMetricsView', '\\IceMX\\UnknownMetricsView', false, null, null);
    }
}

namespace IceMX
{
    if(!interface_exists('\\IceMX\\MetricsAdmin'))
    {
        interface MetricsAdmin
        {
            public function getMetricsViewNames($disabledViews);
            public function enableMetricsView($name);
            public function disableMetricsView($name);
            public function getMetricsView($view, $timestamp);
            public function getMapMetricsFailures($view, $map);
            public function getMetricsFailures($view, $map, $id);
        }

        class MetricsAdminPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::MetricsAdmin', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::MetricsAdmin', $facet);
            }
        }

        $IceMX__t_MetricsAdmin = IcePHP_defineClass('::IceMX::MetricsAdmin', '\\IceMX\\MetricsAdmin', -1, true, false, $Ice__t_Object, null, null);

        $IceMX__t_MetricsAdminPrx = IcePHP_defineProxy($IceMX__t_MetricsAdmin);

        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'getMetricsViewNames', 0, 0, 2, null, array(array($Ice__t_StringSeq, false, 0)), array($Ice__t_StringSeq, false, 0), null);
        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'enableMetricsView', 0, 0, 2, array(array($IcePHP__t_string, false, 0)), null, null, array($IceMX__t_UnknownMetricsView));
        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'disableMetricsView', 0, 0, 2, array(array($IcePHP__t_string, false, 0)), null, null, array($IceMX__t_UnknownMetricsView));
        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'getMetricsView', 0, 0, 2, array(array($IcePHP__t_string, false, 0)), array(array($IcePHP__t_long, false, 0)), array($IceMX__t_MetricsView, false, 0), array($IceMX__t_UnknownMetricsView));
        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'getMapMetricsFailures', 0, 0, 2, array(array($IcePHP__t_string, false, 0), array($IcePHP__t_string, false, 0)), null, array($IceMX__t_MetricsFailuresSeq, false, 0), array($IceMX__t_UnknownMetricsView));
        IcePHP_defineOperation($IceMX__t_MetricsAdmin, 'getMetricsFailures', 0, 0, 2, array(array($IcePHP__t_string, false, 0), array($IcePHP__t_string, false, 0), array($IcePHP__t_string, false, 0)), null, array($IceMX__t_MetricsFailures, false, 0), array($IceMX__t_UnknownMetricsView));
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\ThreadMetrics'))
    {
        class ThreadMetrics extends \IceMX\Metrics
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0, $inUseForIO=0, $inUseForUser=0, $inUseForOther=0)
            {
                parent::__construct($id, $total, $current, $totalLifetime, $failures);
                $this->inUseForIO = $inUseForIO;
                $this->inUseForUser = $inUseForUser;
                $this->inUseForOther = $inUseForOther;
            }

            public static function ice_staticId()
            {
                return '::IceMX::ThreadMetrics';
            }

            public function __toString()
            {
                global $IceMX__t_ThreadMetrics;
                return IcePHP_stringify($this, $IceMX__t_ThreadMetrics);
            }

            public $inUseForIO;
            public $inUseForUser;
            public $inUseForOther;
        }

        class ThreadMetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::ThreadMetrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::ThreadMetrics', $facet);
            }
        }

        $IceMX__t_ThreadMetrics = IcePHP_defineClass('::IceMX::ThreadMetrics', '\\IceMX\\ThreadMetrics', -1, false, false, $IceMX__t_Metrics, null, array(
            array('inUseForIO', $IcePHP__t_int, false, 0),
            array('inUseForUser', $IcePHP__t_int, false, 0),
            array('inUseForOther', $IcePHP__t_int, false, 0)));

        $IceMX__t_ThreadMetricsPrx = IcePHP_defineProxy($IceMX__t_ThreadMetrics);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\DispatchMetrics'))
    {
        class DispatchMetrics extends \IceMX\Metrics
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0, $userException=0, $size=0, $replySize=0)
            {
                parent::__construct($id, $total, $current, $totalLifetime, $failures);
                $this->userException = $userException;
                $this->size = $size;
                $this->replySize = $replySize;
            }

            public static function ice_staticId()
            {
                return '::IceMX::DispatchMetrics';
            }

            public function __toString()
            {
                global $IceMX__t_DispatchMetrics;
                return IcePHP_stringify($this, $IceMX__t_DispatchMetrics);
            }

            public $userException;
            public $size;
            public $replySize;
        }

        class DispatchMetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::DispatchMetrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::DispatchMetrics', $facet);
            }
        }

        $IceMX__t_DispatchMetrics = IcePHP_defineClass('::IceMX::DispatchMetrics', '\\IceMX\\DispatchMetrics', -1, false, false, $IceMX__t_Metrics, null, array(
            array('userException', $IcePHP__t_int, false, 0),
            array('size', $IcePHP__t_long, false, 0),
            array('replySize', $IcePHP__t_long, false, 0)));

        $IceMX__t_DispatchMetricsPrx = IcePHP_defineProxy($IceMX__t_DispatchMetrics);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\RemoteMetrics'))
    {
        class RemoteMetrics extends \IceMX\Metrics
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0, $size=0, $replySize=0)
            {
                parent::__construct($id, $total, $current, $totalLifetime, $failures);
                $this->size = $size;
                $this->replySize = $replySize;
            }

            public static function ice_staticId()
            {
                return '::IceMX::RemoteMetrics';
            }

            public function __toString()
            {
                global $IceMX__t_RemoteMetrics;
                return IcePHP_stringify($this, $IceMX__t_RemoteMetrics);
            }

            public $size;
            public $replySize;
        }

        class RemoteMetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::RemoteMetrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::RemoteMetrics', $facet);
            }
        }

        $IceMX__t_RemoteMetrics = IcePHP_defineClass('::IceMX::RemoteMetrics', '\\IceMX\\RemoteMetrics', -1, false, false, $IceMX__t_Metrics, null, array(
            array('size', $IcePHP__t_long, false, 0),
            array('replySize', $IcePHP__t_long, false, 0)));

        $IceMX__t_RemoteMetricsPrx = IcePHP_defineProxy($IceMX__t_RemoteMetrics);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\InvocationMetrics'))
    {
        class InvocationMetrics extends \IceMX\Metrics
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0, $retry=0, $userException=0, $remotes=null)
            {
                parent::__construct($id, $total, $current, $totalLifetime, $failures);
                $this->retry = $retry;
                $this->userException = $userException;
                $this->remotes = $remotes;
            }

            public static function ice_staticId()
            {
                return '::IceMX::InvocationMetrics';
            }

            public function __toString()
            {
                global $IceMX__t_InvocationMetrics;
                return IcePHP_stringify($this, $IceMX__t_InvocationMetrics);
            }

            public $retry;
            public $userException;
            public $remotes;
        }

        class InvocationMetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::InvocationMetrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::InvocationMetrics', $facet);
            }
        }

        $IceMX__t_InvocationMetrics = IcePHP_declareClass('::IceMX::InvocationMetrics');
        $IceMX__t_InvocationMetricsPrx = IcePHP_declareProxy('::IceMX::InvocationMetrics');

        $IceMX__t_InvocationMetrics = IcePHP_defineClass('::IceMX::InvocationMetrics', '\\IceMX\\InvocationMetrics', -1, false, false, $IceMX__t_Metrics, null, array(
            array('retry', $IcePHP__t_int, false, 0),
            array('userException', $IcePHP__t_int, false, 0),
            array('remotes', $IceMX__t_MetricsMap, false, 0)));

        $IceMX__t_InvocationMetricsPrx = IcePHP_defineProxy($IceMX__t_InvocationMetrics);
    }
}

namespace IceMX
{
    if(!class_exists('\\IceMX\\ConnectionMetrics'))
    {
        class ConnectionMetrics extends \IceMX\Metrics
        {
            public function __construct($id='', $total=0, $current=0, $totalLifetime=0, $failures=0, $receivedBytes=0, $sentBytes=0)
            {
                parent::__construct($id, $total, $current, $totalLifetime, $failures);
                $this->receivedBytes = $receivedBytes;
                $this->sentBytes = $sentBytes;
            }

            public static function ice_staticId()
            {
                return '::IceMX::ConnectionMetrics';
            }

            public function __toString()
            {
                global $IceMX__t_ConnectionMetrics;
                return IcePHP_stringify($this, $IceMX__t_ConnectionMetrics);
            }

            public $receivedBytes;
            public $sentBytes;
        }

        class ConnectionMetricsPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceMX::ConnectionMetrics', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceMX::ConnectionMetrics', $facet);
            }
        }

        $IceMX__t_ConnectionMetrics = IcePHP_defineClass('::IceMX::ConnectionMetrics', '\\IceMX\\ConnectionMetrics', -1, false, false, $IceMX__t_Metrics, null, array(
            array('receivedBytes', $IcePHP__t_long, false, 0),
            array('sentBytes', $IcePHP__t_long, false, 0)));

        $IceMX__t_ConnectionMetricsPrx = IcePHP_defineProxy($IceMX__t_ConnectionMetrics);
    }
}
?>

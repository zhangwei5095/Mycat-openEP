<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Communicator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/LoggerF.php';
    require_once 'Ice/StatsF.php';
    require_once 'Ice/InstrumentationF.php';
    require_once 'Ice/ObjectAdapterF.php';
    require_once 'Ice/ObjectFactoryF.php';
    require_once 'Ice/RouterF.php';
    require_once 'Ice/LocatorF.php';
    require_once 'Ice/PluginF.php';
    require_once 'Ice/ImplicitContextF.php';
    require_once 'Ice/Current.php';
    require_once 'Ice/Properties.php';
}

namespace Ice
{
    if(!interface_exists('\\Ice\\Communicator'))
    {
        interface Communicator
        {
            public function destroy();
            public function shutdown();
            public function waitForShutdown();
            public function isShutdown();
            public function stringToProxy($str);
            public function proxyToString($obj);
            public function propertyToProxy($property);
            public function proxyToProperty($proxy, $property);
            public function stringToIdentity($str);
            public function identityToString($ident);
            public function createObjectAdapter($name);
            public function createObjectAdapterWithEndpoints($name, $endpoints);
            public function createObjectAdapterWithRouter($name, $rtr);
            public function addObjectFactory($factory, $id);
            public function findObjectFactory($id);
            public function getImplicitContext();
            public function getProperties();
            public function getLogger();
            public function getStats();
            public function getObserver();
            public function getDefaultRouter();
            public function setDefaultRouter($rtr);
            public function getDefaultLocator();
            public function setDefaultLocator($loc);
            public function getPluginManager();
            public function flushBatchRequests();
            public function getAdmin();
            public function addAdminFacet($servant, $facet);
            public function removeAdminFacet($facet);
            public function findAdminFacet($facet);
        }

        $Ice__t_Communicator = IcePHP_defineClass('::Ice::Communicator', '\\Ice\\Communicator', -1, true, false, $Ice__t_Object, null, null);
    }
}
?>

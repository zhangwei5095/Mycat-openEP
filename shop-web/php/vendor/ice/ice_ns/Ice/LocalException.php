<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LocalException.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/Identity.php';
    require_once 'Ice/Version.php';
    require_once 'Ice/BuiltinSequences.php';
}

namespace Ice
{
    if(!class_exists('\\Ice\\InitializationException'))
    {
        class InitializationException extends \Ice\LocalException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'Ice::InitializationException';
            }

            public function __toString()
            {
                global $Ice__t_InitializationException;
                return IcePHP_stringifyException($this, $Ice__t_InitializationException);
            }

            public $reason;
        }

        $Ice__t_InitializationException = IcePHP_defineException('::Ice::InitializationException', '\\Ice\\InitializationException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\PluginInitializationException'))
    {
        class PluginInitializationException extends \Ice\LocalException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'Ice::PluginInitializationException';
            }

            public function __toString()
            {
                global $Ice__t_PluginInitializationException;
                return IcePHP_stringifyException($this, $Ice__t_PluginInitializationException);
            }

            public $reason;
        }

        $Ice__t_PluginInitializationException = IcePHP_defineException('::Ice::PluginInitializationException', '\\Ice\\PluginInitializationException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CollocationOptimizationException'))
    {
        class CollocationOptimizationException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::CollocationOptimizationException';
            }

            public function __toString()
            {
                global $Ice__t_CollocationOptimizationException;
                return IcePHP_stringifyException($this, $Ice__t_CollocationOptimizationException);
            }
        }

        $Ice__t_CollocationOptimizationException = IcePHP_defineException('::Ice::CollocationOptimizationException', '\\Ice\\CollocationOptimizationException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\AlreadyRegisteredException'))
    {
        class AlreadyRegisteredException extends \Ice\LocalException
        {
            public function __construct($kindOfObject='', $id='')
            {
                $this->kindOfObject = $kindOfObject;
                $this->id = $id;
            }

            public function ice_name()
            {
                return 'Ice::AlreadyRegisteredException';
            }

            public function __toString()
            {
                global $Ice__t_AlreadyRegisteredException;
                return IcePHP_stringifyException($this, $Ice__t_AlreadyRegisteredException);
            }

            public $kindOfObject;
            public $id;
        }

        $Ice__t_AlreadyRegisteredException = IcePHP_defineException('::Ice::AlreadyRegisteredException', '\\Ice\\AlreadyRegisteredException', false, null, array(
            array('kindOfObject', $IcePHP__t_string, false, 0),
            array('id', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\NotRegisteredException'))
    {
        class NotRegisteredException extends \Ice\LocalException
        {
            public function __construct($kindOfObject='', $id='')
            {
                $this->kindOfObject = $kindOfObject;
                $this->id = $id;
            }

            public function ice_name()
            {
                return 'Ice::NotRegisteredException';
            }

            public function __toString()
            {
                global $Ice__t_NotRegisteredException;
                return IcePHP_stringifyException($this, $Ice__t_NotRegisteredException);
            }

            public $kindOfObject;
            public $id;
        }

        $Ice__t_NotRegisteredException = IcePHP_defineException('::Ice::NotRegisteredException', '\\Ice\\NotRegisteredException', false, null, array(
            array('kindOfObject', $IcePHP__t_string, false, 0),
            array('id', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\TwowayOnlyException'))
    {
        class TwowayOnlyException extends \Ice\LocalException
        {
            public function __construct($operation='')
            {
                $this->operation = $operation;
            }

            public function ice_name()
            {
                return 'Ice::TwowayOnlyException';
            }

            public function __toString()
            {
                global $Ice__t_TwowayOnlyException;
                return IcePHP_stringifyException($this, $Ice__t_TwowayOnlyException);
            }

            public $operation;
        }

        $Ice__t_TwowayOnlyException = IcePHP_defineException('::Ice::TwowayOnlyException', '\\Ice\\TwowayOnlyException', false, null, array(
            array('operation', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CloneNotImplementedException'))
    {
        class CloneNotImplementedException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::CloneNotImplementedException';
            }

            public function __toString()
            {
                global $Ice__t_CloneNotImplementedException;
                return IcePHP_stringifyException($this, $Ice__t_CloneNotImplementedException);
            }
        }

        $Ice__t_CloneNotImplementedException = IcePHP_defineException('::Ice::CloneNotImplementedException', '\\Ice\\CloneNotImplementedException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownException'))
    {
        class UnknownException extends \Ice\LocalException
        {
            public function __construct($unknown='')
            {
                $this->unknown = $unknown;
            }

            public function ice_name()
            {
                return 'Ice::UnknownException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownException);
            }

            public $unknown;
        }

        $Ice__t_UnknownException = IcePHP_defineException('::Ice::UnknownException', '\\Ice\\UnknownException', false, null, array(
            array('unknown', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownLocalException'))
    {
        class UnknownLocalException extends \Ice\UnknownException
        {
            public function __construct($unknown='')
            {
                parent::__construct($unknown);
            }

            public function ice_name()
            {
                return 'Ice::UnknownLocalException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownLocalException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownLocalException);
            }
        }

        $Ice__t_UnknownLocalException = IcePHP_defineException('::Ice::UnknownLocalException', '\\Ice\\UnknownLocalException', false, $Ice__t_UnknownException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownUserException'))
    {
        class UnknownUserException extends \Ice\UnknownException
        {
            public function __construct($unknown='')
            {
                parent::__construct($unknown);
            }

            public function ice_name()
            {
                return 'Ice::UnknownUserException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownUserException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownUserException);
            }
        }

        $Ice__t_UnknownUserException = IcePHP_defineException('::Ice::UnknownUserException', '\\Ice\\UnknownUserException', false, $Ice__t_UnknownException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\VersionMismatchException'))
    {
        class VersionMismatchException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::VersionMismatchException';
            }

            public function __toString()
            {
                global $Ice__t_VersionMismatchException;
                return IcePHP_stringifyException($this, $Ice__t_VersionMismatchException);
            }
        }

        $Ice__t_VersionMismatchException = IcePHP_defineException('::Ice::VersionMismatchException', '\\Ice\\VersionMismatchException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CommunicatorDestroyedException'))
    {
        class CommunicatorDestroyedException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::CommunicatorDestroyedException';
            }

            public function __toString()
            {
                global $Ice__t_CommunicatorDestroyedException;
                return IcePHP_stringifyException($this, $Ice__t_CommunicatorDestroyedException);
            }
        }

        $Ice__t_CommunicatorDestroyedException = IcePHP_defineException('::Ice::CommunicatorDestroyedException', '\\Ice\\CommunicatorDestroyedException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ObjectAdapterDeactivatedException'))
    {
        class ObjectAdapterDeactivatedException extends \Ice\LocalException
        {
            public function __construct($name='')
            {
                $this->name = $name;
            }

            public function ice_name()
            {
                return 'Ice::ObjectAdapterDeactivatedException';
            }

            public function __toString()
            {
                global $Ice__t_ObjectAdapterDeactivatedException;
                return IcePHP_stringifyException($this, $Ice__t_ObjectAdapterDeactivatedException);
            }

            public $name;
        }

        $Ice__t_ObjectAdapterDeactivatedException = IcePHP_defineException('::Ice::ObjectAdapterDeactivatedException', '\\Ice\\ObjectAdapterDeactivatedException', false, null, array(
            array('name', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ObjectAdapterIdInUseException'))
    {
        class ObjectAdapterIdInUseException extends \Ice\LocalException
        {
            public function __construct($id='')
            {
                $this->id = $id;
            }

            public function ice_name()
            {
                return 'Ice::ObjectAdapterIdInUseException';
            }

            public function __toString()
            {
                global $Ice__t_ObjectAdapterIdInUseException;
                return IcePHP_stringifyException($this, $Ice__t_ObjectAdapterIdInUseException);
            }

            public $id;
        }

        $Ice__t_ObjectAdapterIdInUseException = IcePHP_defineException('::Ice::ObjectAdapterIdInUseException', '\\Ice\\ObjectAdapterIdInUseException', false, null, array(
            array('id', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\NoEndpointException'))
    {
        class NoEndpointException extends \Ice\LocalException
        {
            public function __construct($proxy='')
            {
                $this->proxy = $proxy;
            }

            public function ice_name()
            {
                return 'Ice::NoEndpointException';
            }

            public function __toString()
            {
                global $Ice__t_NoEndpointException;
                return IcePHP_stringifyException($this, $Ice__t_NoEndpointException);
            }

            public $proxy;
        }

        $Ice__t_NoEndpointException = IcePHP_defineException('::Ice::NoEndpointException', '\\Ice\\NoEndpointException', false, null, array(
            array('proxy', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\EndpointParseException'))
    {
        class EndpointParseException extends \Ice\LocalException
        {
            public function __construct($str='')
            {
                $this->str = $str;
            }

            public function ice_name()
            {
                return 'Ice::EndpointParseException';
            }

            public function __toString()
            {
                global $Ice__t_EndpointParseException;
                return IcePHP_stringifyException($this, $Ice__t_EndpointParseException);
            }

            public $str;
        }

        $Ice__t_EndpointParseException = IcePHP_defineException('::Ice::EndpointParseException', '\\Ice\\EndpointParseException', false, null, array(
            array('str', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\EndpointSelectionTypeParseException'))
    {
        class EndpointSelectionTypeParseException extends \Ice\LocalException
        {
            public function __construct($str='')
            {
                $this->str = $str;
            }

            public function ice_name()
            {
                return 'Ice::EndpointSelectionTypeParseException';
            }

            public function __toString()
            {
                global $Ice__t_EndpointSelectionTypeParseException;
                return IcePHP_stringifyException($this, $Ice__t_EndpointSelectionTypeParseException);
            }

            public $str;
        }

        $Ice__t_EndpointSelectionTypeParseException = IcePHP_defineException('::Ice::EndpointSelectionTypeParseException', '\\Ice\\EndpointSelectionTypeParseException', false, null, array(
            array('str', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\VersionParseException'))
    {
        class VersionParseException extends \Ice\LocalException
        {
            public function __construct($str='')
            {
                $this->str = $str;
            }

            public function ice_name()
            {
                return 'Ice::VersionParseException';
            }

            public function __toString()
            {
                global $Ice__t_VersionParseException;
                return IcePHP_stringifyException($this, $Ice__t_VersionParseException);
            }

            public $str;
        }

        $Ice__t_VersionParseException = IcePHP_defineException('::Ice::VersionParseException', '\\Ice\\VersionParseException', false, null, array(
            array('str', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\IdentityParseException'))
    {
        class IdentityParseException extends \Ice\LocalException
        {
            public function __construct($str='')
            {
                $this->str = $str;
            }

            public function ice_name()
            {
                return 'Ice::IdentityParseException';
            }

            public function __toString()
            {
                global $Ice__t_IdentityParseException;
                return IcePHP_stringifyException($this, $Ice__t_IdentityParseException);
            }

            public $str;
        }

        $Ice__t_IdentityParseException = IcePHP_defineException('::Ice::IdentityParseException', '\\Ice\\IdentityParseException', false, null, array(
            array('str', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ProxyParseException'))
    {
        class ProxyParseException extends \Ice\LocalException
        {
            public function __construct($str='')
            {
                $this->str = $str;
            }

            public function ice_name()
            {
                return 'Ice::ProxyParseException';
            }

            public function __toString()
            {
                global $Ice__t_ProxyParseException;
                return IcePHP_stringifyException($this, $Ice__t_ProxyParseException);
            }

            public $str;
        }

        $Ice__t_ProxyParseException = IcePHP_defineException('::Ice::ProxyParseException', '\\Ice\\ProxyParseException', false, null, array(
            array('str', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\IllegalIdentityException'))
    {
        class IllegalIdentityException extends \Ice\LocalException
        {
            public function __construct($id=null)
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
            }

            public function ice_name()
            {
                return 'Ice::IllegalIdentityException';
            }

            public function __toString()
            {
                global $Ice__t_IllegalIdentityException;
                return IcePHP_stringifyException($this, $Ice__t_IllegalIdentityException);
            }

            public $id;
        }

        $Ice__t_IllegalIdentityException = IcePHP_defineException('::Ice::IllegalIdentityException', '\\Ice\\IllegalIdentityException', false, null, array(
            array('id', $Ice__t_Identity, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\RequestFailedException'))
    {
        class RequestFailedException extends \Ice\LocalException
        {
            public function __construct($id=null, $facet='', $operation='')
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
                $this->facet = $facet;
                $this->operation = $operation;
            }

            public function ice_name()
            {
                return 'Ice::RequestFailedException';
            }

            public function __toString()
            {
                global $Ice__t_RequestFailedException;
                return IcePHP_stringifyException($this, $Ice__t_RequestFailedException);
            }

            public $id;
            public $facet;
            public $operation;
        }

        $Ice__t_RequestFailedException = IcePHP_defineException('::Ice::RequestFailedException', '\\Ice\\RequestFailedException', false, null, array(
            array('id', $Ice__t_Identity, false, 0),
            array('facet', $IcePHP__t_string, false, 0),
            array('operation', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ObjectNotExistException'))
    {
        class ObjectNotExistException extends \Ice\RequestFailedException
        {
            public function __construct($id=null, $facet='', $operation='')
            {
                parent::__construct($id, $facet, $operation);
            }

            public function ice_name()
            {
                return 'Ice::ObjectNotExistException';
            }

            public function __toString()
            {
                global $Ice__t_ObjectNotExistException;
                return IcePHP_stringifyException($this, $Ice__t_ObjectNotExistException);
            }
        }

        $Ice__t_ObjectNotExistException = IcePHP_defineException('::Ice::ObjectNotExistException', '\\Ice\\ObjectNotExistException', false, $Ice__t_RequestFailedException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\FacetNotExistException'))
    {
        class FacetNotExistException extends \Ice\RequestFailedException
        {
            public function __construct($id=null, $facet='', $operation='')
            {
                parent::__construct($id, $facet, $operation);
            }

            public function ice_name()
            {
                return 'Ice::FacetNotExistException';
            }

            public function __toString()
            {
                global $Ice__t_FacetNotExistException;
                return IcePHP_stringifyException($this, $Ice__t_FacetNotExistException);
            }
        }

        $Ice__t_FacetNotExistException = IcePHP_defineException('::Ice::FacetNotExistException', '\\Ice\\FacetNotExistException', false, $Ice__t_RequestFailedException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\OperationNotExistException'))
    {
        class OperationNotExistException extends \Ice\RequestFailedException
        {
            public function __construct($id=null, $facet='', $operation='')
            {
                parent::__construct($id, $facet, $operation);
            }

            public function ice_name()
            {
                return 'Ice::OperationNotExistException';
            }

            public function __toString()
            {
                global $Ice__t_OperationNotExistException;
                return IcePHP_stringifyException($this, $Ice__t_OperationNotExistException);
            }
        }

        $Ice__t_OperationNotExistException = IcePHP_defineException('::Ice::OperationNotExistException', '\\Ice\\OperationNotExistException', false, $Ice__t_RequestFailedException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\SyscallException'))
    {
        class SyscallException extends \Ice\LocalException
        {
            public function __construct($error=0)
            {
                $this->error = $error;
            }

            public function ice_name()
            {
                return 'Ice::SyscallException';
            }

            public function __toString()
            {
                global $Ice__t_SyscallException;
                return IcePHP_stringifyException($this, $Ice__t_SyscallException);
            }

            public $error;
        }

        $Ice__t_SyscallException = IcePHP_defineException('::Ice::SyscallException', '\\Ice\\SyscallException', false, null, array(
            array('error', $IcePHP__t_int, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\SocketException'))
    {
        class SocketException extends \Ice\SyscallException
        {
            public function __construct($error=0)
            {
                parent::__construct($error);
            }

            public function ice_name()
            {
                return 'Ice::SocketException';
            }

            public function __toString()
            {
                global $Ice__t_SocketException;
                return IcePHP_stringifyException($this, $Ice__t_SocketException);
            }
        }

        $Ice__t_SocketException = IcePHP_defineException('::Ice::SocketException', '\\Ice\\SocketException', false, $Ice__t_SyscallException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\FileException'))
    {
        class FileException extends \Ice\SyscallException
        {
            public function __construct($error=0, $path='')
            {
                parent::__construct($error);
                $this->path = $path;
            }

            public function ice_name()
            {
                return 'Ice::FileException';
            }

            public function __toString()
            {
                global $Ice__t_FileException;
                return IcePHP_stringifyException($this, $Ice__t_FileException);
            }

            public $path;
        }

        $Ice__t_FileException = IcePHP_defineException('::Ice::FileException', '\\Ice\\FileException', false, $Ice__t_SyscallException, array(
            array('path', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectFailedException'))
    {
        class ConnectFailedException extends \Ice\SocketException
        {
            public function __construct($error=0)
            {
                parent::__construct($error);
            }

            public function ice_name()
            {
                return 'Ice::ConnectFailedException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectFailedException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectFailedException);
            }
        }

        $Ice__t_ConnectFailedException = IcePHP_defineException('::Ice::ConnectFailedException', '\\Ice\\ConnectFailedException', false, $Ice__t_SocketException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectionRefusedException'))
    {
        class ConnectionRefusedException extends \Ice\ConnectFailedException
        {
            public function __construct($error=0)
            {
                parent::__construct($error);
            }

            public function ice_name()
            {
                return 'Ice::ConnectionRefusedException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectionRefusedException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectionRefusedException);
            }
        }

        $Ice__t_ConnectionRefusedException = IcePHP_defineException('::Ice::ConnectionRefusedException', '\\Ice\\ConnectionRefusedException', false, $Ice__t_ConnectFailedException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectionLostException'))
    {
        class ConnectionLostException extends \Ice\SocketException
        {
            public function __construct($error=0)
            {
                parent::__construct($error);
            }

            public function ice_name()
            {
                return 'Ice::ConnectionLostException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectionLostException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectionLostException);
            }
        }

        $Ice__t_ConnectionLostException = IcePHP_defineException('::Ice::ConnectionLostException', '\\Ice\\ConnectionLostException', false, $Ice__t_SocketException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\DNSException'))
    {
        class DNSException extends \Ice\LocalException
        {
            public function __construct($error=0, $host='')
            {
                $this->error = $error;
                $this->host = $host;
            }

            public function ice_name()
            {
                return 'Ice::DNSException';
            }

            public function __toString()
            {
                global $Ice__t_DNSException;
                return IcePHP_stringifyException($this, $Ice__t_DNSException);
            }

            public $error;
            public $host;
        }

        $Ice__t_DNSException = IcePHP_defineException('::Ice::DNSException', '\\Ice\\DNSException', false, null, array(
            array('error', $IcePHP__t_int, false, 0),
            array('host', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\TimeoutException'))
    {
        class TimeoutException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::TimeoutException';
            }

            public function __toString()
            {
                global $Ice__t_TimeoutException;
                return IcePHP_stringifyException($this, $Ice__t_TimeoutException);
            }
        }

        $Ice__t_TimeoutException = IcePHP_defineException('::Ice::TimeoutException', '\\Ice\\TimeoutException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectTimeoutException'))
    {
        class ConnectTimeoutException extends \Ice\TimeoutException
        {
            public function __construct()
            {
                parent::__construct();
            }

            public function ice_name()
            {
                return 'Ice::ConnectTimeoutException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectTimeoutException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectTimeoutException);
            }
        }

        $Ice__t_ConnectTimeoutException = IcePHP_defineException('::Ice::ConnectTimeoutException', '\\Ice\\ConnectTimeoutException', false, $Ice__t_TimeoutException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CloseTimeoutException'))
    {
        class CloseTimeoutException extends \Ice\TimeoutException
        {
            public function __construct()
            {
                parent::__construct();
            }

            public function ice_name()
            {
                return 'Ice::CloseTimeoutException';
            }

            public function __toString()
            {
                global $Ice__t_CloseTimeoutException;
                return IcePHP_stringifyException($this, $Ice__t_CloseTimeoutException);
            }
        }

        $Ice__t_CloseTimeoutException = IcePHP_defineException('::Ice::CloseTimeoutException', '\\Ice\\CloseTimeoutException', false, $Ice__t_TimeoutException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectionTimeoutException'))
    {
        class ConnectionTimeoutException extends \Ice\TimeoutException
        {
            public function __construct()
            {
                parent::__construct();
            }

            public function ice_name()
            {
                return 'Ice::ConnectionTimeoutException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectionTimeoutException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectionTimeoutException);
            }
        }

        $Ice__t_ConnectionTimeoutException = IcePHP_defineException('::Ice::ConnectionTimeoutException', '\\Ice\\ConnectionTimeoutException', false, $Ice__t_TimeoutException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ProtocolException'))
    {
        class ProtocolException extends \Ice\LocalException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'Ice::ProtocolException';
            }

            public function __toString()
            {
                global $Ice__t_ProtocolException;
                return IcePHP_stringifyException($this, $Ice__t_ProtocolException);
            }

            public $reason;
        }

        $Ice__t_ProtocolException = IcePHP_defineException('::Ice::ProtocolException', '\\Ice\\ProtocolException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\BadMagicException'))
    {
        class BadMagicException extends \Ice\ProtocolException
        {
            public function __construct($reason='', $badMagic=null)
            {
                parent::__construct($reason);
                $this->badMagic = $badMagic;
            }

            public function ice_name()
            {
                return 'Ice::BadMagicException';
            }

            public function __toString()
            {
                global $Ice__t_BadMagicException;
                return IcePHP_stringifyException($this, $Ice__t_BadMagicException);
            }

            public $badMagic;
        }

        $Ice__t_BadMagicException = IcePHP_defineException('::Ice::BadMagicException', '\\Ice\\BadMagicException', false, $Ice__t_ProtocolException, array(
            array('badMagic', $Ice__t_ByteSeq, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnsupportedProtocolException'))
    {
        class UnsupportedProtocolException extends \Ice\ProtocolException
        {
            public function __construct($reason='', $bad=null, $supported=null)
            {
                parent::__construct($reason);
                $this->bad = is_null($bad) ? new \Ice\ProtocolVersion : $bad;
                $this->supported = is_null($supported) ? new \Ice\ProtocolVersion : $supported;
            }

            public function ice_name()
            {
                return 'Ice::UnsupportedProtocolException';
            }

            public function __toString()
            {
                global $Ice__t_UnsupportedProtocolException;
                return IcePHP_stringifyException($this, $Ice__t_UnsupportedProtocolException);
            }

            public $bad;
            public $supported;
        }

        $Ice__t_UnsupportedProtocolException = IcePHP_defineException('::Ice::UnsupportedProtocolException', '\\Ice\\UnsupportedProtocolException', false, $Ice__t_ProtocolException, array(
            array('bad', $Ice__t_ProtocolVersion, false, 0),
            array('supported', $Ice__t_ProtocolVersion, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnsupportedEncodingException'))
    {
        class UnsupportedEncodingException extends \Ice\ProtocolException
        {
            public function __construct($reason='', $bad=null, $supported=null)
            {
                parent::__construct($reason);
                $this->bad = is_null($bad) ? new \Ice\EncodingVersion : $bad;
                $this->supported = is_null($supported) ? new \Ice\EncodingVersion : $supported;
            }

            public function ice_name()
            {
                return 'Ice::UnsupportedEncodingException';
            }

            public function __toString()
            {
                global $Ice__t_UnsupportedEncodingException;
                return IcePHP_stringifyException($this, $Ice__t_UnsupportedEncodingException);
            }

            public $bad;
            public $supported;
        }

        $Ice__t_UnsupportedEncodingException = IcePHP_defineException('::Ice::UnsupportedEncodingException', '\\Ice\\UnsupportedEncodingException', false, $Ice__t_ProtocolException, array(
            array('bad', $Ice__t_EncodingVersion, false, 0),
            array('supported', $Ice__t_EncodingVersion, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownMessageException'))
    {
        class UnknownMessageException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::UnknownMessageException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownMessageException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownMessageException);
            }
        }

        $Ice__t_UnknownMessageException = IcePHP_defineException('::Ice::UnknownMessageException', '\\Ice\\UnknownMessageException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ConnectionNotValidatedException'))
    {
        class ConnectionNotValidatedException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::ConnectionNotValidatedException';
            }

            public function __toString()
            {
                global $Ice__t_ConnectionNotValidatedException;
                return IcePHP_stringifyException($this, $Ice__t_ConnectionNotValidatedException);
            }
        }

        $Ice__t_ConnectionNotValidatedException = IcePHP_defineException('::Ice::ConnectionNotValidatedException', '\\Ice\\ConnectionNotValidatedException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownRequestIdException'))
    {
        class UnknownRequestIdException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::UnknownRequestIdException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownRequestIdException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownRequestIdException);
            }
        }

        $Ice__t_UnknownRequestIdException = IcePHP_defineException('::Ice::UnknownRequestIdException', '\\Ice\\UnknownRequestIdException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnknownReplyStatusException'))
    {
        class UnknownReplyStatusException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::UnknownReplyStatusException';
            }

            public function __toString()
            {
                global $Ice__t_UnknownReplyStatusException;
                return IcePHP_stringifyException($this, $Ice__t_UnknownReplyStatusException);
            }
        }

        $Ice__t_UnknownReplyStatusException = IcePHP_defineException('::Ice::UnknownReplyStatusException', '\\Ice\\UnknownReplyStatusException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CloseConnectionException'))
    {
        class CloseConnectionException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::CloseConnectionException';
            }

            public function __toString()
            {
                global $Ice__t_CloseConnectionException;
                return IcePHP_stringifyException($this, $Ice__t_CloseConnectionException);
            }
        }

        $Ice__t_CloseConnectionException = IcePHP_defineException('::Ice::CloseConnectionException', '\\Ice\\CloseConnectionException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ForcedCloseConnectionException'))
    {
        class ForcedCloseConnectionException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::ForcedCloseConnectionException';
            }

            public function __toString()
            {
                global $Ice__t_ForcedCloseConnectionException;
                return IcePHP_stringifyException($this, $Ice__t_ForcedCloseConnectionException);
            }
        }

        $Ice__t_ForcedCloseConnectionException = IcePHP_defineException('::Ice::ForcedCloseConnectionException', '\\Ice\\ForcedCloseConnectionException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\IllegalMessageSizeException'))
    {
        class IllegalMessageSizeException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::IllegalMessageSizeException';
            }

            public function __toString()
            {
                global $Ice__t_IllegalMessageSizeException;
                return IcePHP_stringifyException($this, $Ice__t_IllegalMessageSizeException);
            }
        }

        $Ice__t_IllegalMessageSizeException = IcePHP_defineException('::Ice::IllegalMessageSizeException', '\\Ice\\IllegalMessageSizeException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\CompressionException'))
    {
        class CompressionException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::CompressionException';
            }

            public function __toString()
            {
                global $Ice__t_CompressionException;
                return IcePHP_stringifyException($this, $Ice__t_CompressionException);
            }
        }

        $Ice__t_CompressionException = IcePHP_defineException('::Ice::CompressionException', '\\Ice\\CompressionException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\DatagramLimitException'))
    {
        class DatagramLimitException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::DatagramLimitException';
            }

            public function __toString()
            {
                global $Ice__t_DatagramLimitException;
                return IcePHP_stringifyException($this, $Ice__t_DatagramLimitException);
            }
        }

        $Ice__t_DatagramLimitException = IcePHP_defineException('::Ice::DatagramLimitException', '\\Ice\\DatagramLimitException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\MarshalException'))
    {
        class MarshalException extends \Ice\ProtocolException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::MarshalException';
            }

            public function __toString()
            {
                global $Ice__t_MarshalException;
                return IcePHP_stringifyException($this, $Ice__t_MarshalException);
            }
        }

        $Ice__t_MarshalException = IcePHP_defineException('::Ice::MarshalException', '\\Ice\\MarshalException', false, $Ice__t_ProtocolException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ProxyUnmarshalException'))
    {
        class ProxyUnmarshalException extends \Ice\MarshalException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::ProxyUnmarshalException';
            }

            public function __toString()
            {
                global $Ice__t_ProxyUnmarshalException;
                return IcePHP_stringifyException($this, $Ice__t_ProxyUnmarshalException);
            }
        }

        $Ice__t_ProxyUnmarshalException = IcePHP_defineException('::Ice::ProxyUnmarshalException', '\\Ice\\ProxyUnmarshalException', false, $Ice__t_MarshalException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnmarshalOutOfBoundsException'))
    {
        class UnmarshalOutOfBoundsException extends \Ice\MarshalException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::UnmarshalOutOfBoundsException';
            }

            public function __toString()
            {
                global $Ice__t_UnmarshalOutOfBoundsException;
                return IcePHP_stringifyException($this, $Ice__t_UnmarshalOutOfBoundsException);
            }
        }

        $Ice__t_UnmarshalOutOfBoundsException = IcePHP_defineException('::Ice::UnmarshalOutOfBoundsException', '\\Ice\\UnmarshalOutOfBoundsException', false, $Ice__t_MarshalException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\NoObjectFactoryException'))
    {
        class NoObjectFactoryException extends \Ice\MarshalException
        {
            public function __construct($reason='', $type='')
            {
                parent::__construct($reason);
                $this->type = $type;
            }

            public function ice_name()
            {
                return 'Ice::NoObjectFactoryException';
            }

            public function __toString()
            {
                global $Ice__t_NoObjectFactoryException;
                return IcePHP_stringifyException($this, $Ice__t_NoObjectFactoryException);
            }

            public $type;
        }

        $Ice__t_NoObjectFactoryException = IcePHP_defineException('::Ice::NoObjectFactoryException', '\\Ice\\NoObjectFactoryException', false, $Ice__t_MarshalException, array(
            array('type', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\UnexpectedObjectException'))
    {
        class UnexpectedObjectException extends \Ice\MarshalException
        {
            public function __construct($reason='', $type='', $expectedType='')
            {
                parent::__construct($reason);
                $this->type = $type;
                $this->expectedType = $expectedType;
            }

            public function ice_name()
            {
                return 'Ice::UnexpectedObjectException';
            }

            public function __toString()
            {
                global $Ice__t_UnexpectedObjectException;
                return IcePHP_stringifyException($this, $Ice__t_UnexpectedObjectException);
            }

            public $type;
            public $expectedType;
        }

        $Ice__t_UnexpectedObjectException = IcePHP_defineException('::Ice::UnexpectedObjectException', '\\Ice\\UnexpectedObjectException', false, $Ice__t_MarshalException, array(
            array('type', $IcePHP__t_string, false, 0),
            array('expectedType', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\MemoryLimitException'))
    {
        class MemoryLimitException extends \Ice\MarshalException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::MemoryLimitException';
            }

            public function __toString()
            {
                global $Ice__t_MemoryLimitException;
                return IcePHP_stringifyException($this, $Ice__t_MemoryLimitException);
            }
        }

        $Ice__t_MemoryLimitException = IcePHP_defineException('::Ice::MemoryLimitException', '\\Ice\\MemoryLimitException', false, $Ice__t_MarshalException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\StringConversionException'))
    {
        class StringConversionException extends \Ice\MarshalException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::StringConversionException';
            }

            public function __toString()
            {
                global $Ice__t_StringConversionException;
                return IcePHP_stringifyException($this, $Ice__t_StringConversionException);
            }
        }

        $Ice__t_StringConversionException = IcePHP_defineException('::Ice::StringConversionException', '\\Ice\\StringConversionException', false, $Ice__t_MarshalException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\EncapsulationException'))
    {
        class EncapsulationException extends \Ice\MarshalException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'Ice::EncapsulationException';
            }

            public function __toString()
            {
                global $Ice__t_EncapsulationException;
                return IcePHP_stringifyException($this, $Ice__t_EncapsulationException);
            }
        }

        $Ice__t_EncapsulationException = IcePHP_defineException('::Ice::EncapsulationException', '\\Ice\\EncapsulationException', false, $Ice__t_MarshalException, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\FeatureNotSupportedException'))
    {
        class FeatureNotSupportedException extends \Ice\LocalException
        {
            public function __construct($unsupportedFeature='')
            {
                $this->unsupportedFeature = $unsupportedFeature;
            }

            public function ice_name()
            {
                return 'Ice::FeatureNotSupportedException';
            }

            public function __toString()
            {
                global $Ice__t_FeatureNotSupportedException;
                return IcePHP_stringifyException($this, $Ice__t_FeatureNotSupportedException);
            }

            public $unsupportedFeature;
        }

        $Ice__t_FeatureNotSupportedException = IcePHP_defineException('::Ice::FeatureNotSupportedException', '\\Ice\\FeatureNotSupportedException', false, null, array(
            array('unsupportedFeature', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\SecurityException'))
    {
        class SecurityException extends \Ice\LocalException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'Ice::SecurityException';
            }

            public function __toString()
            {
                global $Ice__t_SecurityException;
                return IcePHP_stringifyException($this, $Ice__t_SecurityException);
            }

            public $reason;
        }

        $Ice__t_SecurityException = IcePHP_defineException('::Ice::SecurityException', '\\Ice\\SecurityException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\FixedProxyException'))
    {
        class FixedProxyException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::FixedProxyException';
            }

            public function __toString()
            {
                global $Ice__t_FixedProxyException;
                return IcePHP_stringifyException($this, $Ice__t_FixedProxyException);
            }
        }

        $Ice__t_FixedProxyException = IcePHP_defineException('::Ice::FixedProxyException', '\\Ice\\FixedProxyException', false, null, null);
    }
}

namespace Ice
{
    if(!class_exists('\\Ice\\ResponseSentException'))
    {
        class ResponseSentException extends \Ice\LocalException
        {
            public function __construct()
            {
            }

            public function ice_name()
            {
                return 'Ice::ResponseSentException';
            }

            public function __toString()
            {
                global $Ice__t_ResponseSentException;
                return IcePHP_stringifyException($this, $Ice__t_ResponseSentException);
            }
        }

        $Ice__t_ResponseSentException = IcePHP_defineException('::Ice::ResponseSentException', '\\Ice\\ResponseSentException', false, null, null);
    }
}
?>

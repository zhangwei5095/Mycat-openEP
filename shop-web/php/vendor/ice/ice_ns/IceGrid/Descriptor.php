<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/Identity.php';
    require_once 'Ice/BuiltinSequences.php';
}

namespace IceGrid
{
    if(!isset($IceGrid__t_StringStringDict))
    {
        $IceGrid__t_StringStringDict = IcePHP_defineDictionary('::IceGrid::StringStringDict', $IcePHP__t_string, $IcePHP__t_string);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\PropertyDescriptor'))
    {
        class PropertyDescriptor
        {
            public function __construct($name='', $value='')
            {
                $this->name = $name;
                $this->value = $value;
            }

            public function __toString()
            {
                global $IceGrid__t_PropertyDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_PropertyDescriptor);
            }

            public $name;
            public $value;
        }

        $IceGrid__t_PropertyDescriptor = IcePHP_defineStruct('::IceGrid::PropertyDescriptor', '\\IceGrid\\PropertyDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('value', $IcePHP__t_string)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_PropertyDescriptorSeq))
    {
        $IceGrid__t_PropertyDescriptorSeq = IcePHP_defineSequence('::IceGrid::PropertyDescriptorSeq', $IceGrid__t_PropertyDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\PropertySetDescriptor'))
    {
        class PropertySetDescriptor
        {
            public function __construct($references=null, $properties=null)
            {
                $this->references = $references;
                $this->properties = $properties;
            }

            public function __toString()
            {
                global $IceGrid__t_PropertySetDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_PropertySetDescriptor);
            }

            public $references;
            public $properties;
        }

        $IceGrid__t_PropertySetDescriptor = IcePHP_defineStruct('::IceGrid::PropertySetDescriptor', '\\IceGrid\\PropertySetDescriptor', array(
            array('references', $Ice__t_StringSeq), 
            array('properties', $IceGrid__t_PropertyDescriptorSeq)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_PropertySetDescriptorDict))
    {
        $IceGrid__t_PropertySetDescriptorDict = IcePHP_defineDictionary('::IceGrid::PropertySetDescriptorDict', $IcePHP__t_string, $IceGrid__t_PropertySetDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ObjectDescriptor'))
    {
        class ObjectDescriptor
        {
            public function __construct($id=null, $type='', $proxyOptions='')
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
                $this->type = $type;
                $this->proxyOptions = $proxyOptions;
            }

            public function __toString()
            {
                global $IceGrid__t_ObjectDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ObjectDescriptor);
            }

            public $id;
            public $type;
            public $proxyOptions;
        }

        $IceGrid__t_ObjectDescriptor = IcePHP_defineStruct('::IceGrid::ObjectDescriptor', '\\IceGrid\\ObjectDescriptor', array(
            array('id', $Ice__t_Identity), 
            array('type', $IcePHP__t_string), 
            array('proxyOptions', $IcePHP__t_string)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ObjectDescriptorSeq))
    {
        $IceGrid__t_ObjectDescriptorSeq = IcePHP_defineSequence('::IceGrid::ObjectDescriptorSeq', $IceGrid__t_ObjectDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AdapterDescriptor'))
    {
        class AdapterDescriptor
        {
            public function __construct($name='', $description='', $id='', $replicaGroupId='', $priority='', $registerProcess=false, $serverLifetime=false, $objects=null, $allocatables=null)
            {
                $this->name = $name;
                $this->description = $description;
                $this->id = $id;
                $this->replicaGroupId = $replicaGroupId;
                $this->priority = $priority;
                $this->registerProcess = $registerProcess;
                $this->serverLifetime = $serverLifetime;
                $this->objects = $objects;
                $this->allocatables = $allocatables;
            }

            public function __toString()
            {
                global $IceGrid__t_AdapterDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_AdapterDescriptor);
            }

            public $name;
            public $description;
            public $id;
            public $replicaGroupId;
            public $priority;
            public $registerProcess;
            public $serverLifetime;
            public $objects;
            public $allocatables;
        }

        $IceGrid__t_AdapterDescriptor = IcePHP_defineStruct('::IceGrid::AdapterDescriptor', '\\IceGrid\\AdapterDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('description', $IcePHP__t_string), 
            array('id', $IcePHP__t_string), 
            array('replicaGroupId', $IcePHP__t_string), 
            array('priority', $IcePHP__t_string), 
            array('registerProcess', $IcePHP__t_bool), 
            array('serverLifetime', $IcePHP__t_bool), 
            array('objects', $IceGrid__t_ObjectDescriptorSeq), 
            array('allocatables', $IceGrid__t_ObjectDescriptorSeq)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_AdapterDescriptorSeq))
    {
        $IceGrid__t_AdapterDescriptorSeq = IcePHP_defineSequence('::IceGrid::AdapterDescriptorSeq', $IceGrid__t_AdapterDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\DbEnvDescriptor'))
    {
        class DbEnvDescriptor
        {
            public function __construct($name='', $description='', $dbHome='', $properties=null)
            {
                $this->name = $name;
                $this->description = $description;
                $this->dbHome = $dbHome;
                $this->properties = $properties;
            }

            public function __toString()
            {
                global $IceGrid__t_DbEnvDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_DbEnvDescriptor);
            }

            public $name;
            public $description;
            public $dbHome;
            public $properties;
        }

        $IceGrid__t_DbEnvDescriptor = IcePHP_defineStruct('::IceGrid::DbEnvDescriptor', '\\IceGrid\\DbEnvDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('description', $IcePHP__t_string), 
            array('dbHome', $IcePHP__t_string), 
            array('properties', $IceGrid__t_PropertyDescriptorSeq)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_DbEnvDescriptorSeq))
    {
        $IceGrid__t_DbEnvDescriptorSeq = IcePHP_defineSequence('::IceGrid::DbEnvDescriptorSeq', $IceGrid__t_DbEnvDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\CommunicatorDescriptor'))
    {
        class CommunicatorDescriptor extends \Ice\ObjectImpl
        {
            public function __construct($adapters=null, $propertySet=null, $dbEnvs=null, $logs=null, $description='')
            {
                $this->adapters = $adapters;
                $this->propertySet = is_null($propertySet) ? new \IceGrid\PropertySetDescriptor : $propertySet;
                $this->dbEnvs = $dbEnvs;
                $this->logs = $logs;
                $this->description = $description;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::CommunicatorDescriptor';
            }

            public function __toString()
            {
                global $IceGrid__t_CommunicatorDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_CommunicatorDescriptor);
            }

            public $adapters;
            public $propertySet;
            public $dbEnvs;
            public $logs;
            public $description;
        }

        class CommunicatorDescriptorPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::CommunicatorDescriptor', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::CommunicatorDescriptor', $facet);
            }
        }

        $IceGrid__t_CommunicatorDescriptor = IcePHP_defineClass('::IceGrid::CommunicatorDescriptor', '\\IceGrid\\CommunicatorDescriptor', -1, false, false, $Ice__t_Object, null, array(
            array('adapters', $IceGrid__t_AdapterDescriptorSeq, false, 0),
            array('propertySet', $IceGrid__t_PropertySetDescriptor, false, 0),
            array('dbEnvs', $IceGrid__t_DbEnvDescriptorSeq, false, 0),
            array('logs', $Ice__t_StringSeq, false, 0),
            array('description', $IcePHP__t_string, false, 0)));

        $IceGrid__t_CommunicatorDescriptorPrx = IcePHP_defineProxy($IceGrid__t_CommunicatorDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\DistributionDescriptor'))
    {
        class DistributionDescriptor
        {
            public function __construct($icepatch='', $directories=null)
            {
                $this->icepatch = $icepatch;
                $this->directories = $directories;
            }

            public function __toString()
            {
                global $IceGrid__t_DistributionDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_DistributionDescriptor);
            }

            public $icepatch;
            public $directories;
        }

        $IceGrid__t_DistributionDescriptor = IcePHP_defineStruct('::IceGrid::DistributionDescriptor', '\\IceGrid\\DistributionDescriptor', array(
            array('icepatch', $IcePHP__t_string), 
            array('directories', $Ice__t_StringSeq)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerDescriptor'))
    {
        class ServerDescriptor extends \IceGrid\CommunicatorDescriptor
        {
            public function __construct($adapters=null, $propertySet=null, $dbEnvs=null, $logs=null, $description='', $id='', $exe='', $iceVersion='', $pwd='', $options=null, $envs=null, $activation='', $activationTimeout='', $deactivationTimeout='', $applicationDistrib=false, $distrib=null, $allocatable=false, $user='')
            {
                parent::__construct($adapters, $propertySet, $dbEnvs, $logs, $description);
                $this->id = $id;
                $this->exe = $exe;
                $this->iceVersion = $iceVersion;
                $this->pwd = $pwd;
                $this->options = $options;
                $this->envs = $envs;
                $this->activation = $activation;
                $this->activationTimeout = $activationTimeout;
                $this->deactivationTimeout = $deactivationTimeout;
                $this->applicationDistrib = $applicationDistrib;
                $this->distrib = is_null($distrib) ? new \IceGrid\DistributionDescriptor : $distrib;
                $this->allocatable = $allocatable;
                $this->user = $user;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::ServerDescriptor';
            }

            public function __toString()
            {
                global $IceGrid__t_ServerDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ServerDescriptor);
            }

            public $id;
            public $exe;
            public $iceVersion;
            public $pwd;
            public $options;
            public $envs;
            public $activation;
            public $activationTimeout;
            public $deactivationTimeout;
            public $applicationDistrib;
            public $distrib;
            public $allocatable;
            public $user;
        }

        class ServerDescriptorPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::ServerDescriptor', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::ServerDescriptor', $facet);
            }
        }

        $IceGrid__t_ServerDescriptor = IcePHP_defineClass('::IceGrid::ServerDescriptor', '\\IceGrid\\ServerDescriptor', -1, false, false, $IceGrid__t_CommunicatorDescriptor, null, array(
            array('id', $IcePHP__t_string, false, 0),
            array('exe', $IcePHP__t_string, false, 0),
            array('iceVersion', $IcePHP__t_string, false, 0),
            array('pwd', $IcePHP__t_string, false, 0),
            array('options', $Ice__t_StringSeq, false, 0),
            array('envs', $Ice__t_StringSeq, false, 0),
            array('activation', $IcePHP__t_string, false, 0),
            array('activationTimeout', $IcePHP__t_string, false, 0),
            array('deactivationTimeout', $IcePHP__t_string, false, 0),
            array('applicationDistrib', $IcePHP__t_bool, false, 0),
            array('distrib', $IceGrid__t_DistributionDescriptor, false, 0),
            array('allocatable', $IcePHP__t_bool, false, 0),
            array('user', $IcePHP__t_string, false, 0)));

        $IceGrid__t_ServerDescriptorPrx = IcePHP_defineProxy($IceGrid__t_ServerDescriptor);
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ServerDescriptorSeq))
    {
        $IceGrid__t_ServerDescriptorSeq = IcePHP_defineSequence('::IceGrid::ServerDescriptorSeq', $IceGrid__t_ServerDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServiceDescriptor'))
    {
        class ServiceDescriptor extends \IceGrid\CommunicatorDescriptor
        {
            public function __construct($adapters=null, $propertySet=null, $dbEnvs=null, $logs=null, $description='', $name='', $entry='')
            {
                parent::__construct($adapters, $propertySet, $dbEnvs, $logs, $description);
                $this->name = $name;
                $this->entry = $entry;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::ServiceDescriptor';
            }

            public function __toString()
            {
                global $IceGrid__t_ServiceDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ServiceDescriptor);
            }

            public $name;
            public $entry;
        }

        class ServiceDescriptorPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::ServiceDescriptor', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::ServiceDescriptor', $facet);
            }
        }

        $IceGrid__t_ServiceDescriptor = IcePHP_defineClass('::IceGrid::ServiceDescriptor', '\\IceGrid\\ServiceDescriptor', -1, false, false, $IceGrid__t_CommunicatorDescriptor, null, array(
            array('name', $IcePHP__t_string, false, 0),
            array('entry', $IcePHP__t_string, false, 0)));

        $IceGrid__t_ServiceDescriptorPrx = IcePHP_defineProxy($IceGrid__t_ServiceDescriptor);
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ServiceDescriptorSeq))
    {
        $IceGrid__t_ServiceDescriptorSeq = IcePHP_defineSequence('::IceGrid::ServiceDescriptorSeq', $IceGrid__t_ServiceDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerInstanceDescriptor'))
    {
        class ServerInstanceDescriptor
        {
            public function __construct($template='', $parameterValues=null, $propertySet=null, $servicePropertySets=null)
            {
                $this->template = $template;
                $this->parameterValues = $parameterValues;
                $this->propertySet = is_null($propertySet) ? new \IceGrid\PropertySetDescriptor : $propertySet;
                $this->servicePropertySets = $servicePropertySets;
            }

            public function __toString()
            {
                global $IceGrid__t_ServerInstanceDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ServerInstanceDescriptor);
            }

            public $template;
            public $parameterValues;
            public $propertySet;
            public $servicePropertySets;
        }

        $IceGrid__t_ServerInstanceDescriptor = IcePHP_defineStruct('::IceGrid::ServerInstanceDescriptor', '\\IceGrid\\ServerInstanceDescriptor', array(
            array('template', $IcePHP__t_string), 
            array('parameterValues', $IceGrid__t_StringStringDict), 
            array('propertySet', $IceGrid__t_PropertySetDescriptor), 
            array('servicePropertySets', $IceGrid__t_PropertySetDescriptorDict)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ServerInstanceDescriptorSeq))
    {
        $IceGrid__t_ServerInstanceDescriptorSeq = IcePHP_defineSequence('::IceGrid::ServerInstanceDescriptorSeq', $IceGrid__t_ServerInstanceDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\TemplateDescriptor'))
    {
        class TemplateDescriptor
        {
            public function __construct($descriptor=null, $parameters=null, $parameterDefaults=null)
            {
                $this->descriptor = $descriptor;
                $this->parameters = $parameters;
                $this->parameterDefaults = $parameterDefaults;
            }

            public function __toString()
            {
                global $IceGrid__t_TemplateDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_TemplateDescriptor);
            }

            public $descriptor;
            public $parameters;
            public $parameterDefaults;
        }

        $IceGrid__t_TemplateDescriptor = IcePHP_defineStruct('::IceGrid::TemplateDescriptor', '\\IceGrid\\TemplateDescriptor', array(
            array('descriptor', $IceGrid__t_CommunicatorDescriptor), 
            array('parameters', $Ice__t_StringSeq), 
            array('parameterDefaults', $IceGrid__t_StringStringDict)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_TemplateDescriptorDict))
    {
        $IceGrid__t_TemplateDescriptorDict = IcePHP_defineDictionary('::IceGrid::TemplateDescriptorDict', $IcePHP__t_string, $IceGrid__t_TemplateDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServiceInstanceDescriptor'))
    {
        class ServiceInstanceDescriptor
        {
            public function __construct($template='', $parameterValues=null, $descriptor=null, $propertySet=null)
            {
                $this->template = $template;
                $this->parameterValues = $parameterValues;
                $this->descriptor = $descriptor;
                $this->propertySet = is_null($propertySet) ? new \IceGrid\PropertySetDescriptor : $propertySet;
            }

            public function __toString()
            {
                global $IceGrid__t_ServiceInstanceDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ServiceInstanceDescriptor);
            }

            public $template;
            public $parameterValues;
            public $descriptor;
            public $propertySet;
        }

        $IceGrid__t_ServiceInstanceDescriptor = IcePHP_defineStruct('::IceGrid::ServiceInstanceDescriptor', '\\IceGrid\\ServiceInstanceDescriptor', array(
            array('template', $IcePHP__t_string), 
            array('parameterValues', $IceGrid__t_StringStringDict), 
            array('descriptor', $IceGrid__t_ServiceDescriptor), 
            array('propertySet', $IceGrid__t_PropertySetDescriptor)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ServiceInstanceDescriptorSeq))
    {
        $IceGrid__t_ServiceInstanceDescriptorSeq = IcePHP_defineSequence('::IceGrid::ServiceInstanceDescriptorSeq', $IceGrid__t_ServiceInstanceDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\IceBoxDescriptor'))
    {
        class IceBoxDescriptor extends \IceGrid\ServerDescriptor
        {
            public function __construct($adapters=null, $propertySet=null, $dbEnvs=null, $logs=null, $description='', $id='', $exe='', $iceVersion='', $pwd='', $options=null, $envs=null, $activation='', $activationTimeout='', $deactivationTimeout='', $applicationDistrib=false, $distrib=null, $allocatable=false, $user='', $services=null)
            {
                parent::__construct($adapters, $propertySet, $dbEnvs, $logs, $description, $id, $exe, $iceVersion, $pwd, $options, $envs, $activation, $activationTimeout, $deactivationTimeout, $applicationDistrib, $distrib, $allocatable, $user);
                $this->services = $services;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::IceBoxDescriptor';
            }

            public function __toString()
            {
                global $IceGrid__t_IceBoxDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_IceBoxDescriptor);
            }

            public $services;
        }

        class IceBoxDescriptorPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::IceBoxDescriptor', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::IceBoxDescriptor', $facet);
            }
        }

        $IceGrid__t_IceBoxDescriptor = IcePHP_declareClass('::IceGrid::IceBoxDescriptor');
        $IceGrid__t_IceBoxDescriptorPrx = IcePHP_declareProxy('::IceGrid::IceBoxDescriptor');

        $IceGrid__t_IceBoxDescriptor = IcePHP_defineClass('::IceGrid::IceBoxDescriptor', '\\IceGrid\\IceBoxDescriptor', -1, false, false, $IceGrid__t_ServerDescriptor, null, array(
            array('services', $IceGrid__t_ServiceInstanceDescriptorSeq, false, 0)));

        $IceGrid__t_IceBoxDescriptorPrx = IcePHP_defineProxy($IceGrid__t_IceBoxDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\NodeDescriptor'))
    {
        class NodeDescriptor
        {
            public function __construct($variables=null, $serverInstances=null, $servers=null, $loadFactor='', $description='', $propertySets=null)
            {
                $this->variables = $variables;
                $this->serverInstances = $serverInstances;
                $this->servers = $servers;
                $this->loadFactor = $loadFactor;
                $this->description = $description;
                $this->propertySets = $propertySets;
            }

            public function __toString()
            {
                global $IceGrid__t_NodeDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_NodeDescriptor);
            }

            public $variables;
            public $serverInstances;
            public $servers;
            public $loadFactor;
            public $description;
            public $propertySets;
        }

        $IceGrid__t_NodeDescriptor = IcePHP_defineStruct('::IceGrid::NodeDescriptor', '\\IceGrid\\NodeDescriptor', array(
            array('variables', $IceGrid__t_StringStringDict), 
            array('serverInstances', $IceGrid__t_ServerInstanceDescriptorSeq), 
            array('servers', $IceGrid__t_ServerDescriptorSeq), 
            array('loadFactor', $IcePHP__t_string), 
            array('description', $IcePHP__t_string), 
            array('propertySets', $IceGrid__t_PropertySetDescriptorDict)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_NodeDescriptorDict))
    {
        $IceGrid__t_NodeDescriptorDict = IcePHP_defineDictionary('::IceGrid::NodeDescriptorDict', $IcePHP__t_string, $IceGrid__t_NodeDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\LoadBalancingPolicy'))
    {
        class LoadBalancingPolicy extends \Ice\ObjectImpl
        {
            public function __construct($nReplicas='')
            {
                $this->nReplicas = $nReplicas;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::LoadBalancingPolicy';
            }

            public function __toString()
            {
                global $IceGrid__t_LoadBalancingPolicy;
                return IcePHP_stringify($this, $IceGrid__t_LoadBalancingPolicy);
            }

            public $nReplicas;
        }

        class LoadBalancingPolicyPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::LoadBalancingPolicy', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::LoadBalancingPolicy', $facet);
            }
        }

        $IceGrid__t_LoadBalancingPolicy = IcePHP_defineClass('::IceGrid::LoadBalancingPolicy', '\\IceGrid\\LoadBalancingPolicy', -1, false, false, $Ice__t_Object, null, array(
            array('nReplicas', $IcePHP__t_string, false, 0)));

        $IceGrid__t_LoadBalancingPolicyPrx = IcePHP_defineProxy($IceGrid__t_LoadBalancingPolicy);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\RandomLoadBalancingPolicy'))
    {
        class RandomLoadBalancingPolicy extends \IceGrid\LoadBalancingPolicy
        {
            public function __construct($nReplicas='')
            {
                parent::__construct($nReplicas);
            }

            public static function ice_staticId()
            {
                return '::IceGrid::RandomLoadBalancingPolicy';
            }

            public function __toString()
            {
                global $IceGrid__t_RandomLoadBalancingPolicy;
                return IcePHP_stringify($this, $IceGrid__t_RandomLoadBalancingPolicy);
            }
        }

        class RandomLoadBalancingPolicyPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::RandomLoadBalancingPolicy', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::RandomLoadBalancingPolicy', $facet);
            }
        }

        $IceGrid__t_RandomLoadBalancingPolicy = IcePHP_defineClass('::IceGrid::RandomLoadBalancingPolicy', '\\IceGrid\\RandomLoadBalancingPolicy', -1, false, false, $IceGrid__t_LoadBalancingPolicy, null, null);

        $IceGrid__t_RandomLoadBalancingPolicyPrx = IcePHP_defineProxy($IceGrid__t_RandomLoadBalancingPolicy);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\OrderedLoadBalancingPolicy'))
    {
        class OrderedLoadBalancingPolicy extends \IceGrid\LoadBalancingPolicy
        {
            public function __construct($nReplicas='')
            {
                parent::__construct($nReplicas);
            }

            public static function ice_staticId()
            {
                return '::IceGrid::OrderedLoadBalancingPolicy';
            }

            public function __toString()
            {
                global $IceGrid__t_OrderedLoadBalancingPolicy;
                return IcePHP_stringify($this, $IceGrid__t_OrderedLoadBalancingPolicy);
            }
        }

        class OrderedLoadBalancingPolicyPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::OrderedLoadBalancingPolicy', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::OrderedLoadBalancingPolicy', $facet);
            }
        }

        $IceGrid__t_OrderedLoadBalancingPolicy = IcePHP_defineClass('::IceGrid::OrderedLoadBalancingPolicy', '\\IceGrid\\OrderedLoadBalancingPolicy', -1, false, false, $IceGrid__t_LoadBalancingPolicy, null, null);

        $IceGrid__t_OrderedLoadBalancingPolicyPrx = IcePHP_defineProxy($IceGrid__t_OrderedLoadBalancingPolicy);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\RoundRobinLoadBalancingPolicy'))
    {
        class RoundRobinLoadBalancingPolicy extends \IceGrid\LoadBalancingPolicy
        {
            public function __construct($nReplicas='')
            {
                parent::__construct($nReplicas);
            }

            public static function ice_staticId()
            {
                return '::IceGrid::RoundRobinLoadBalancingPolicy';
            }

            public function __toString()
            {
                global $IceGrid__t_RoundRobinLoadBalancingPolicy;
                return IcePHP_stringify($this, $IceGrid__t_RoundRobinLoadBalancingPolicy);
            }
        }

        class RoundRobinLoadBalancingPolicyPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::RoundRobinLoadBalancingPolicy', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::RoundRobinLoadBalancingPolicy', $facet);
            }
        }

        $IceGrid__t_RoundRobinLoadBalancingPolicy = IcePHP_defineClass('::IceGrid::RoundRobinLoadBalancingPolicy', '\\IceGrid\\RoundRobinLoadBalancingPolicy', -1, false, false, $IceGrid__t_LoadBalancingPolicy, null, null);

        $IceGrid__t_RoundRobinLoadBalancingPolicyPrx = IcePHP_defineProxy($IceGrid__t_RoundRobinLoadBalancingPolicy);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AdaptiveLoadBalancingPolicy'))
    {
        class AdaptiveLoadBalancingPolicy extends \IceGrid\LoadBalancingPolicy
        {
            public function __construct($nReplicas='', $loadSample='')
            {
                parent::__construct($nReplicas);
                $this->loadSample = $loadSample;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::AdaptiveLoadBalancingPolicy';
            }

            public function __toString()
            {
                global $IceGrid__t_AdaptiveLoadBalancingPolicy;
                return IcePHP_stringify($this, $IceGrid__t_AdaptiveLoadBalancingPolicy);
            }

            public $loadSample;
        }

        class AdaptiveLoadBalancingPolicyPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::AdaptiveLoadBalancingPolicy', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::AdaptiveLoadBalancingPolicy', $facet);
            }
        }

        $IceGrid__t_AdaptiveLoadBalancingPolicy = IcePHP_defineClass('::IceGrid::AdaptiveLoadBalancingPolicy', '\\IceGrid\\AdaptiveLoadBalancingPolicy', -1, false, false, $IceGrid__t_LoadBalancingPolicy, null, array(
            array('loadSample', $IcePHP__t_string, false, 0)));

        $IceGrid__t_AdaptiveLoadBalancingPolicyPrx = IcePHP_defineProxy($IceGrid__t_AdaptiveLoadBalancingPolicy);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ReplicaGroupDescriptor'))
    {
        class ReplicaGroupDescriptor
        {
            public function __construct($id='', $loadBalancing=null, $proxyOptions='', $objects=null, $description='')
            {
                $this->id = $id;
                $this->loadBalancing = $loadBalancing;
                $this->proxyOptions = $proxyOptions;
                $this->objects = $objects;
                $this->description = $description;
            }

            public function __toString()
            {
                global $IceGrid__t_ReplicaGroupDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ReplicaGroupDescriptor);
            }

            public $id;
            public $loadBalancing;
            public $proxyOptions;
            public $objects;
            public $description;
        }

        $IceGrid__t_ReplicaGroupDescriptor = IcePHP_defineStruct('::IceGrid::ReplicaGroupDescriptor', '\\IceGrid\\ReplicaGroupDescriptor', array(
            array('id', $IcePHP__t_string), 
            array('loadBalancing', $IceGrid__t_LoadBalancingPolicy), 
            array('proxyOptions', $IcePHP__t_string), 
            array('objects', $IceGrid__t_ObjectDescriptorSeq), 
            array('description', $IcePHP__t_string)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ReplicaGroupDescriptorSeq))
    {
        $IceGrid__t_ReplicaGroupDescriptorSeq = IcePHP_defineSequence('::IceGrid::ReplicaGroupDescriptorSeq', $IceGrid__t_ReplicaGroupDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ApplicationDescriptor'))
    {
        class ApplicationDescriptor
        {
            public function __construct($name='', $variables=null, $replicaGroups=null, $serverTemplates=null, $serviceTemplates=null, $nodes=null, $distrib=null, $description='', $propertySets=null)
            {
                $this->name = $name;
                $this->variables = $variables;
                $this->replicaGroups = $replicaGroups;
                $this->serverTemplates = $serverTemplates;
                $this->serviceTemplates = $serviceTemplates;
                $this->nodes = $nodes;
                $this->distrib = is_null($distrib) ? new \IceGrid\DistributionDescriptor : $distrib;
                $this->description = $description;
                $this->propertySets = $propertySets;
            }

            public function __toString()
            {
                global $IceGrid__t_ApplicationDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ApplicationDescriptor);
            }

            public $name;
            public $variables;
            public $replicaGroups;
            public $serverTemplates;
            public $serviceTemplates;
            public $nodes;
            public $distrib;
            public $description;
            public $propertySets;
        }

        $IceGrid__t_ApplicationDescriptor = IcePHP_defineStruct('::IceGrid::ApplicationDescriptor', '\\IceGrid\\ApplicationDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('variables', $IceGrid__t_StringStringDict), 
            array('replicaGroups', $IceGrid__t_ReplicaGroupDescriptorSeq), 
            array('serverTemplates', $IceGrid__t_TemplateDescriptorDict), 
            array('serviceTemplates', $IceGrid__t_TemplateDescriptorDict), 
            array('nodes', $IceGrid__t_NodeDescriptorDict), 
            array('distrib', $IceGrid__t_DistributionDescriptor), 
            array('description', $IcePHP__t_string), 
            array('propertySets', $IceGrid__t_PropertySetDescriptorDict)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_ApplicationDescriptorSeq))
    {
        $IceGrid__t_ApplicationDescriptorSeq = IcePHP_defineSequence('::IceGrid::ApplicationDescriptorSeq', $IceGrid__t_ApplicationDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\BoxedString'))
    {
        class BoxedString extends \Ice\ObjectImpl
        {
            public function __construct($value='')
            {
                $this->value = $value;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::BoxedString';
            }

            public function __toString()
            {
                global $IceGrid__t_BoxedString;
                return IcePHP_stringify($this, $IceGrid__t_BoxedString);
            }

            public $value;
        }

        class BoxedStringPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::BoxedString', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::BoxedString', $facet);
            }
        }

        $IceGrid__t_BoxedString = IcePHP_defineClass('::IceGrid::BoxedString', '\\IceGrid\\BoxedString', -1, false, false, $Ice__t_Object, null, array(
            array('value', $IcePHP__t_string, false, 0)));

        $IceGrid__t_BoxedStringPrx = IcePHP_defineProxy($IceGrid__t_BoxedString);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\NodeUpdateDescriptor'))
    {
        class NodeUpdateDescriptor
        {
            public function __construct($name='', $description=null, $variables=null, $removeVariables=null, $propertySets=null, $removePropertySets=null, $serverInstances=null, $servers=null, $removeServers=null, $loadFactor=null)
            {
                $this->name = $name;
                $this->description = $description;
                $this->variables = $variables;
                $this->removeVariables = $removeVariables;
                $this->propertySets = $propertySets;
                $this->removePropertySets = $removePropertySets;
                $this->serverInstances = $serverInstances;
                $this->servers = $servers;
                $this->removeServers = $removeServers;
                $this->loadFactor = $loadFactor;
            }

            public function __toString()
            {
                global $IceGrid__t_NodeUpdateDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_NodeUpdateDescriptor);
            }

            public $name;
            public $description;
            public $variables;
            public $removeVariables;
            public $propertySets;
            public $removePropertySets;
            public $serverInstances;
            public $servers;
            public $removeServers;
            public $loadFactor;
        }

        $IceGrid__t_NodeUpdateDescriptor = IcePHP_defineStruct('::IceGrid::NodeUpdateDescriptor', '\\IceGrid\\NodeUpdateDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('description', $IceGrid__t_BoxedString), 
            array('variables', $IceGrid__t_StringStringDict), 
            array('removeVariables', $Ice__t_StringSeq), 
            array('propertySets', $IceGrid__t_PropertySetDescriptorDict), 
            array('removePropertySets', $Ice__t_StringSeq), 
            array('serverInstances', $IceGrid__t_ServerInstanceDescriptorSeq), 
            array('servers', $IceGrid__t_ServerDescriptorSeq), 
            array('removeServers', $Ice__t_StringSeq), 
            array('loadFactor', $IceGrid__t_BoxedString)));
    }
}

namespace IceGrid
{
    if(!isset($IceGrid__t_NodeUpdateDescriptorSeq))
    {
        $IceGrid__t_NodeUpdateDescriptorSeq = IcePHP_defineSequence('::IceGrid::NodeUpdateDescriptorSeq', $IceGrid__t_NodeUpdateDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\BoxedDistributionDescriptor'))
    {
        class BoxedDistributionDescriptor extends \Ice\ObjectImpl
        {
            public function __construct($value=null)
            {
                $this->value = is_null($value) ? new \IceGrid\DistributionDescriptor : $value;
            }

            public static function ice_staticId()
            {
                return '::IceGrid::BoxedDistributionDescriptor';
            }

            public function __toString()
            {
                global $IceGrid__t_BoxedDistributionDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_BoxedDistributionDescriptor);
            }

            public $value;
        }

        class BoxedDistributionDescriptorPrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::IceGrid::BoxedDistributionDescriptor', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::IceGrid::BoxedDistributionDescriptor', $facet);
            }
        }

        $IceGrid__t_BoxedDistributionDescriptor = IcePHP_defineClass('::IceGrid::BoxedDistributionDescriptor', '\\IceGrid\\BoxedDistributionDescriptor', -1, false, false, $Ice__t_Object, null, array(
            array('value', $IceGrid__t_DistributionDescriptor, false, 0)));

        $IceGrid__t_BoxedDistributionDescriptorPrx = IcePHP_defineProxy($IceGrid__t_BoxedDistributionDescriptor);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ApplicationUpdateDescriptor'))
    {
        class ApplicationUpdateDescriptor
        {
            public function __construct($name='', $description=null, $distrib=null, $variables=null, $removeVariables=null, $propertySets=null, $removePropertySets=null, $replicaGroups=null, $removeReplicaGroups=null, $serverTemplates=null, $removeServerTemplates=null, $serviceTemplates=null, $removeServiceTemplates=null, $nodes=null, $removeNodes=null)
            {
                $this->name = $name;
                $this->description = $description;
                $this->distrib = $distrib;
                $this->variables = $variables;
                $this->removeVariables = $removeVariables;
                $this->propertySets = $propertySets;
                $this->removePropertySets = $removePropertySets;
                $this->replicaGroups = $replicaGroups;
                $this->removeReplicaGroups = $removeReplicaGroups;
                $this->serverTemplates = $serverTemplates;
                $this->removeServerTemplates = $removeServerTemplates;
                $this->serviceTemplates = $serviceTemplates;
                $this->removeServiceTemplates = $removeServiceTemplates;
                $this->nodes = $nodes;
                $this->removeNodes = $removeNodes;
            }

            public function __toString()
            {
                global $IceGrid__t_ApplicationUpdateDescriptor;
                return IcePHP_stringify($this, $IceGrid__t_ApplicationUpdateDescriptor);
            }

            public $name;
            public $description;
            public $distrib;
            public $variables;
            public $removeVariables;
            public $propertySets;
            public $removePropertySets;
            public $replicaGroups;
            public $removeReplicaGroups;
            public $serverTemplates;
            public $removeServerTemplates;
            public $serviceTemplates;
            public $removeServiceTemplates;
            public $nodes;
            public $removeNodes;
        }

        $IceGrid__t_ApplicationUpdateDescriptor = IcePHP_defineStruct('::IceGrid::ApplicationUpdateDescriptor', '\\IceGrid\\ApplicationUpdateDescriptor', array(
            array('name', $IcePHP__t_string), 
            array('description', $IceGrid__t_BoxedString), 
            array('distrib', $IceGrid__t_BoxedDistributionDescriptor), 
            array('variables', $IceGrid__t_StringStringDict), 
            array('removeVariables', $Ice__t_StringSeq), 
            array('propertySets', $IceGrid__t_PropertySetDescriptorDict), 
            array('removePropertySets', $Ice__t_StringSeq), 
            array('replicaGroups', $IceGrid__t_ReplicaGroupDescriptorSeq), 
            array('removeReplicaGroups', $Ice__t_StringSeq), 
            array('serverTemplates', $IceGrid__t_TemplateDescriptorDict), 
            array('removeServerTemplates', $Ice__t_StringSeq), 
            array('serviceTemplates', $IceGrid__t_TemplateDescriptorDict), 
            array('removeServiceTemplates', $Ice__t_StringSeq), 
            array('nodes', $IceGrid__t_NodeUpdateDescriptorSeq), 
            array('removeNodes', $Ice__t_StringSeq)));
    }
}
?>

<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/Identity.php';
    require_once 'Ice/BuiltinSequences.php';
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ApplicationNotExistException'))
    {
        class ApplicationNotExistException extends \Ice\UserException
        {
            public function __construct($name='')
            {
                $this->name = $name;
            }

            public function ice_name()
            {
                return 'IceGrid::ApplicationNotExistException';
            }

            public function __toString()
            {
                global $IceGrid__t_ApplicationNotExistException;
                return IcePHP_stringifyException($this, $IceGrid__t_ApplicationNotExistException);
            }

            public $name;
        }

        $IceGrid__t_ApplicationNotExistException = IcePHP_defineException('::IceGrid::ApplicationNotExistException', '\\IceGrid\\ApplicationNotExistException', false, null, array(
            array('name', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerNotExistException'))
    {
        class ServerNotExistException extends \Ice\UserException
        {
            public function __construct($id='')
            {
                $this->id = $id;
            }

            public function ice_name()
            {
                return 'IceGrid::ServerNotExistException';
            }

            public function __toString()
            {
                global $IceGrid__t_ServerNotExistException;
                return IcePHP_stringifyException($this, $IceGrid__t_ServerNotExistException);
            }

            public $id;
        }

        $IceGrid__t_ServerNotExistException = IcePHP_defineException('::IceGrid::ServerNotExistException', '\\IceGrid\\ServerNotExistException', false, null, array(
            array('id', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerStartException'))
    {
        class ServerStartException extends \Ice\UserException
        {
            public function __construct($id='', $reason='')
            {
                $this->id = $id;
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::ServerStartException';
            }

            public function __toString()
            {
                global $IceGrid__t_ServerStartException;
                return IcePHP_stringifyException($this, $IceGrid__t_ServerStartException);
            }

            public $id;
            public $reason;
        }

        $IceGrid__t_ServerStartException = IcePHP_defineException('::IceGrid::ServerStartException', '\\IceGrid\\ServerStartException', false, null, array(
            array('id', $IcePHP__t_string, false, 0),
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerStopException'))
    {
        class ServerStopException extends \Ice\UserException
        {
            public function __construct($id='', $reason='')
            {
                $this->id = $id;
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::ServerStopException';
            }

            public function __toString()
            {
                global $IceGrid__t_ServerStopException;
                return IcePHP_stringifyException($this, $IceGrid__t_ServerStopException);
            }

            public $id;
            public $reason;
        }

        $IceGrid__t_ServerStopException = IcePHP_defineException('::IceGrid::ServerStopException', '\\IceGrid\\ServerStopException', false, null, array(
            array('id', $IcePHP__t_string, false, 0),
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AdapterNotExistException'))
    {
        class AdapterNotExistException extends \Ice\UserException
        {
            public function __construct($id='')
            {
                $this->id = $id;
            }

            public function ice_name()
            {
                return 'IceGrid::AdapterNotExistException';
            }

            public function __toString()
            {
                global $IceGrid__t_AdapterNotExistException;
                return IcePHP_stringifyException($this, $IceGrid__t_AdapterNotExistException);
            }

            public $id;
        }

        $IceGrid__t_AdapterNotExistException = IcePHP_defineException('::IceGrid::AdapterNotExistException', '\\IceGrid\\AdapterNotExistException', false, null, array(
            array('id', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ObjectExistsException'))
    {
        class ObjectExistsException extends \Ice\UserException
        {
            public function __construct($id=null)
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
            }

            public function ice_name()
            {
                return 'IceGrid::ObjectExistsException';
            }

            public function __toString()
            {
                global $IceGrid__t_ObjectExistsException;
                return IcePHP_stringifyException($this, $IceGrid__t_ObjectExistsException);
            }

            public $id;
        }

        $IceGrid__t_ObjectExistsException = IcePHP_defineException('::IceGrid::ObjectExistsException', '\\IceGrid\\ObjectExistsException', false, null, array(
            array('id', $Ice__t_Identity, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ObjectNotRegisteredException'))
    {
        class ObjectNotRegisteredException extends \Ice\UserException
        {
            public function __construct($id=null)
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
            }

            public function ice_name()
            {
                return 'IceGrid::ObjectNotRegisteredException';
            }

            public function __toString()
            {
                global $IceGrid__t_ObjectNotRegisteredException;
                return IcePHP_stringifyException($this, $IceGrid__t_ObjectNotRegisteredException);
            }

            public $id;
        }

        $IceGrid__t_ObjectNotRegisteredException = IcePHP_defineException('::IceGrid::ObjectNotRegisteredException', '\\IceGrid\\ObjectNotRegisteredException', false, null, array(
            array('id', $Ice__t_Identity, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\NodeNotExistException'))
    {
        class NodeNotExistException extends \Ice\UserException
        {
            public function __construct($name='')
            {
                $this->name = $name;
            }

            public function ice_name()
            {
                return 'IceGrid::NodeNotExistException';
            }

            public function __toString()
            {
                global $IceGrid__t_NodeNotExistException;
                return IcePHP_stringifyException($this, $IceGrid__t_NodeNotExistException);
            }

            public $name;
        }

        $IceGrid__t_NodeNotExistException = IcePHP_defineException('::IceGrid::NodeNotExistException', '\\IceGrid\\NodeNotExistException', false, null, array(
            array('name', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\RegistryNotExistException'))
    {
        class RegistryNotExistException extends \Ice\UserException
        {
            public function __construct($name='')
            {
                $this->name = $name;
            }

            public function ice_name()
            {
                return 'IceGrid::RegistryNotExistException';
            }

            public function __toString()
            {
                global $IceGrid__t_RegistryNotExistException;
                return IcePHP_stringifyException($this, $IceGrid__t_RegistryNotExistException);
            }

            public $name;
        }

        $IceGrid__t_RegistryNotExistException = IcePHP_defineException('::IceGrid::RegistryNotExistException', '\\IceGrid\\RegistryNotExistException', false, null, array(
            array('name', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\DeploymentException'))
    {
        class DeploymentException extends \Ice\UserException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::DeploymentException';
            }

            public function __toString()
            {
                global $IceGrid__t_DeploymentException;
                return IcePHP_stringifyException($this, $IceGrid__t_DeploymentException);
            }

            public $reason;
        }

        $IceGrid__t_DeploymentException = IcePHP_defineException('::IceGrid::DeploymentException', '\\IceGrid\\DeploymentException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\NodeUnreachableException'))
    {
        class NodeUnreachableException extends \Ice\UserException
        {
            public function __construct($name='', $reason='')
            {
                $this->name = $name;
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::NodeUnreachableException';
            }

            public function __toString()
            {
                global $IceGrid__t_NodeUnreachableException;
                return IcePHP_stringifyException($this, $IceGrid__t_NodeUnreachableException);
            }

            public $name;
            public $reason;
        }

        $IceGrid__t_NodeUnreachableException = IcePHP_defineException('::IceGrid::NodeUnreachableException', '\\IceGrid\\NodeUnreachableException', false, null, array(
            array('name', $IcePHP__t_string, false, 0),
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ServerUnreachableException'))
    {
        class ServerUnreachableException extends \Ice\UserException
        {
            public function __construct($name='', $reason='')
            {
                $this->name = $name;
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::ServerUnreachableException';
            }

            public function __toString()
            {
                global $IceGrid__t_ServerUnreachableException;
                return IcePHP_stringifyException($this, $IceGrid__t_ServerUnreachableException);
            }

            public $name;
            public $reason;
        }

        $IceGrid__t_ServerUnreachableException = IcePHP_defineException('::IceGrid::ServerUnreachableException', '\\IceGrid\\ServerUnreachableException', false, null, array(
            array('name', $IcePHP__t_string, false, 0),
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\RegistryUnreachableException'))
    {
        class RegistryUnreachableException extends \Ice\UserException
        {
            public function __construct($name='', $reason='')
            {
                $this->name = $name;
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::RegistryUnreachableException';
            }

            public function __toString()
            {
                global $IceGrid__t_RegistryUnreachableException;
                return IcePHP_stringifyException($this, $IceGrid__t_RegistryUnreachableException);
            }

            public $name;
            public $reason;
        }

        $IceGrid__t_RegistryUnreachableException = IcePHP_defineException('::IceGrid::RegistryUnreachableException', '\\IceGrid\\RegistryUnreachableException', false, null, array(
            array('name', $IcePHP__t_string, false, 0),
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\BadSignalException'))
    {
        class BadSignalException extends \Ice\UserException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::BadSignalException';
            }

            public function __toString()
            {
                global $IceGrid__t_BadSignalException;
                return IcePHP_stringifyException($this, $IceGrid__t_BadSignalException);
            }

            public $reason;
        }

        $IceGrid__t_BadSignalException = IcePHP_defineException('::IceGrid::BadSignalException', '\\IceGrid\\BadSignalException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\PatchException'))
    {
        class PatchException extends \Ice\UserException
        {
            public function __construct($reasons=null)
            {
                $this->reasons = $reasons;
            }

            public function ice_name()
            {
                return 'IceGrid::PatchException';
            }

            public function __toString()
            {
                global $IceGrid__t_PatchException;
                return IcePHP_stringifyException($this, $IceGrid__t_PatchException);
            }

            public $reasons;
        }

        $IceGrid__t_PatchException = IcePHP_defineException('::IceGrid::PatchException', '\\IceGrid\\PatchException', false, null, array(
            array('reasons', $Ice__t_StringSeq, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AccessDeniedException'))
    {
        class AccessDeniedException extends \Ice\UserException
        {
            public function __construct($lockUserId='')
            {
                $this->lockUserId = $lockUserId;
            }

            public function ice_name()
            {
                return 'IceGrid::AccessDeniedException';
            }

            public function __toString()
            {
                global $IceGrid__t_AccessDeniedException;
                return IcePHP_stringifyException($this, $IceGrid__t_AccessDeniedException);
            }

            public $lockUserId;
        }

        $IceGrid__t_AccessDeniedException = IcePHP_defineException('::IceGrid::AccessDeniedException', '\\IceGrid\\AccessDeniedException', false, null, array(
            array('lockUserId', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AllocationException'))
    {
        class AllocationException extends \Ice\UserException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::AllocationException';
            }

            public function __toString()
            {
                global $IceGrid__t_AllocationException;
                return IcePHP_stringifyException($this, $IceGrid__t_AllocationException);
            }

            public $reason;
        }

        $IceGrid__t_AllocationException = IcePHP_defineException('::IceGrid::AllocationException', '\\IceGrid\\AllocationException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\AllocationTimeoutException'))
    {
        class AllocationTimeoutException extends \IceGrid\AllocationException
        {
            public function __construct($reason='')
            {
                parent::__construct($reason);
            }

            public function ice_name()
            {
                return 'IceGrid::AllocationTimeoutException';
            }

            public function __toString()
            {
                global $IceGrid__t_AllocationTimeoutException;
                return IcePHP_stringifyException($this, $IceGrid__t_AllocationTimeoutException);
            }
        }

        $IceGrid__t_AllocationTimeoutException = IcePHP_defineException('::IceGrid::AllocationTimeoutException', '\\IceGrid\\AllocationTimeoutException', false, $IceGrid__t_AllocationException, null);
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\PermissionDeniedException'))
    {
        class PermissionDeniedException extends \Ice\UserException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::PermissionDeniedException';
            }

            public function __toString()
            {
                global $IceGrid__t_PermissionDeniedException;
                return IcePHP_stringifyException($this, $IceGrid__t_PermissionDeniedException);
            }

            public $reason;
        }

        $IceGrid__t_PermissionDeniedException = IcePHP_defineException('::IceGrid::PermissionDeniedException', '\\IceGrid\\PermissionDeniedException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\ObserverAlreadyRegisteredException'))
    {
        class ObserverAlreadyRegisteredException extends \Ice\UserException
        {
            public function __construct($id=null)
            {
                $this->id = is_null($id) ? new \Ice\Identity : $id;
            }

            public function ice_name()
            {
                return 'IceGrid::ObserverAlreadyRegisteredException';
            }

            public function __toString()
            {
                global $IceGrid__t_ObserverAlreadyRegisteredException;
                return IcePHP_stringifyException($this, $IceGrid__t_ObserverAlreadyRegisteredException);
            }

            public $id;
        }

        $IceGrid__t_ObserverAlreadyRegisteredException = IcePHP_defineException('::IceGrid::ObserverAlreadyRegisteredException', '\\IceGrid\\ObserverAlreadyRegisteredException', false, null, array(
            array('id', $Ice__t_Identity, false, 0)));
    }
}

namespace IceGrid
{
    if(!class_exists('\\IceGrid\\FileNotAvailableException'))
    {
        class FileNotAvailableException extends \Ice\UserException
        {
            public function __construct($reason='')
            {
                $this->reason = $reason;
            }

            public function ice_name()
            {
                return 'IceGrid::FileNotAvailableException';
            }

            public function __toString()
            {
                global $IceGrid__t_FileNotAvailableException;
                return IcePHP_stringifyException($this, $IceGrid__t_FileNotAvailableException);
            }

            public $reason;
        }

        $IceGrid__t_FileNotAvailableException = IcePHP_defineException('::IceGrid::FileNotAvailableException', '\\IceGrid\\FileNotAvailableException', false, null, array(
            array('reason', $IcePHP__t_string, false, 0)));
    }
}
?>

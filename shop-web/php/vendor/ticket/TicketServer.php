<?php
// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TicketServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace ticket
{
    if(!class_exists('\\ticket\\Order'))
    {
        class Order
        {
            public function __construct($orderId=0, $phone='', $orderNum='', $orderDate=0, $ticketType=0, $amount=0.0, $orderStatus=0)
            {
                $this->orderId = $orderId;
                $this->phone = $phone;
                $this->orderNum = $orderNum;
                $this->orderDate = $orderDate;
                $this->ticketType = $ticketType;
                $this->amount = $amount;
                $this->orderStatus = $orderStatus;
            }

            public function __toString()
            {
                global $ticket__t_Order;
                return IcePHP_stringify($this, $ticket__t_Order);
            }

            public $orderId;
            public $phone;
            public $orderNum;
            public $orderDate;
            public $ticketType;
            public $amount;
            public $orderStatus;
        }

        $ticket__t_Order = IcePHP_defineStruct('::ticket::Order', '\\ticket\\Order', array(
            array('orderId', $IcePHP__t_long), 
            array('phone', $IcePHP__t_string), 
            array('orderNum', $IcePHP__t_string), 
            array('orderDate', $IcePHP__t_int), 
            array('ticketType', $IcePHP__t_int), 
            array('amount', $IcePHP__t_double), 
            array('orderStatus', $IcePHP__t_int)));
    }
}

namespace ticket
{
    if(!isset($ticket__t_OrderSeq))
    {
        $ticket__t_OrderSeq = IcePHP_defineSequence('::ticket::OrderSeq', $ticket__t_Order);
    }
}

namespace ticket
{
    if(!interface_exists('\\ticket\\TicketService'))
    {
        interface TicketService
        {
            public function createOrder($myOrder);
            public function queryMyOrders($phone);
            public function cancelOrder($orderId);
        }

        class TicketServicePrxHelper
        {
            public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
            {
                return $proxy->ice_checkedCast('::ticket::TicketService', $facetOrCtx, $ctx);
            }

            public static function uncheckedCast($proxy, $facet=null)
            {
                return $proxy->ice_uncheckedCast('::ticket::TicketService', $facet);
            }
        }

        $ticket__t_TicketService = IcePHP_defineClass('::ticket::TicketService', '\\ticket\\TicketService', -1, true, false, $Ice__t_Object, null, null);

        $ticket__t_TicketServicePrx = IcePHP_defineProxy($ticket__t_TicketService);

        IcePHP_defineOperation($ticket__t_TicketService, 'createOrder', 0, 0, 0, array(array($ticket__t_Order, false, 0)), null, array($IcePHP__t_bool, false, 0), null);
        IcePHP_defineOperation($ticket__t_TicketService, 'queryMyOrders', 0, 0, 0, array(array($IcePHP__t_string, false, 0)), null, array($ticket__t_OrderSeq, false, 0), null);
        IcePHP_defineOperation($ticket__t_TicketService, 'cancelOrder', 0, 0, 0, array(array($IcePHP__t_long, false, 0)), null, array($IcePHP__t_bool, false, 0), null);
    }
}
?>
